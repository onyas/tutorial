/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.onyas.thrift.mongodbused.gen;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

public class ThriftMetadataService {

    public interface Iface {

        public String createFileMetadata(String userName, String pwd, String bucketName, String objectId, String fileMetadatas) throws org.apache.thrift.TException;

        public String updateFileMetadata(String userName, String pwd, String bucketName, String objectId, String fileMetadatas) throws org.apache.thrift.TException;

        public String deleteFileMetadata(String userName, String pwd, String bucketName, String objectId) throws org.apache.thrift.TException;

        public String getFileMetadata(String userName, String pwd, String bucketName, String objectId) throws org.apache.thrift.TException;

        public String getFileMetadatas(String userName, String pwd, String bucketName, String fsCriteria) throws org.apache.thrift.TException;

        public String addUser(String userName, String pwd, String buckets) throws org.apache.thrift.TException;

        public String updateUser(String userName, String pwd, String buckets) throws org.apache.thrift.TException;

        public String getUser(String userName) throws org.apache.thrift.TException;

        public String deleteUser(String userName) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void createFileMetadata(String userName, String pwd, String bucketName, String objectId, String fileMetadatas, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void updateFileMetadata(String userName, String pwd, String bucketName, String objectId, String fileMetadatas, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void deleteFileMetadata(String userName, String pwd, String bucketName, String objectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getFileMetadata(String userName, String pwd, String bucketName, String objectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getFileMetadatas(String userName, String pwd, String bucketName, String fsCriteria, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void addUser(String userName, String pwd, String buckets, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void updateUser(String userName, String pwd, String buckets, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getUser(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void deleteUser(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public String createFileMetadata(String userName, String pwd, String bucketName, String objectId, String fileMetadatas) throws org.apache.thrift.TException {
            send_createFileMetadata(userName, pwd, bucketName, objectId, fileMetadatas);
            return recv_createFileMetadata();
        }

        public void send_createFileMetadata(String userName, String pwd, String bucketName, String objectId, String fileMetadatas) throws org.apache.thrift.TException {
            createFileMetadata_args args = new createFileMetadata_args();
            args.setUserName(userName);
            args.setPwd(pwd);
            args.setBucketName(bucketName);
            args.setObjectId(objectId);
            args.setFileMetadatas(fileMetadatas);
            sendBase("createFileMetadata", args);
        }

        public String recv_createFileMetadata() throws org.apache.thrift.TException {
            createFileMetadata_result result = new createFileMetadata_result();
            receiveBase(result, "createFileMetadata");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createFileMetadata failed: unknown result");
        }

        public String updateFileMetadata(String userName, String pwd, String bucketName, String objectId, String fileMetadatas) throws org.apache.thrift.TException {
            send_updateFileMetadata(userName, pwd, bucketName, objectId, fileMetadatas);
            return recv_updateFileMetadata();
        }

        public void send_updateFileMetadata(String userName, String pwd, String bucketName, String objectId, String fileMetadatas) throws org.apache.thrift.TException {
            updateFileMetadata_args args = new updateFileMetadata_args();
            args.setUserName(userName);
            args.setPwd(pwd);
            args.setBucketName(bucketName);
            args.setObjectId(objectId);
            args.setFileMetadatas(fileMetadatas);
            sendBase("updateFileMetadata", args);
        }

        public String recv_updateFileMetadata() throws org.apache.thrift.TException {
            updateFileMetadata_result result = new updateFileMetadata_result();
            receiveBase(result, "updateFileMetadata");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateFileMetadata failed: unknown result");
        }

        public String deleteFileMetadata(String userName, String pwd, String bucketName, String objectId) throws org.apache.thrift.TException {
            send_deleteFileMetadata(userName, pwd, bucketName, objectId);
            return recv_deleteFileMetadata();
        }

        public void send_deleteFileMetadata(String userName, String pwd, String bucketName, String objectId) throws org.apache.thrift.TException {
            deleteFileMetadata_args args = new deleteFileMetadata_args();
            args.setUserName(userName);
            args.setPwd(pwd);
            args.setBucketName(bucketName);
            args.setObjectId(objectId);
            sendBase("deleteFileMetadata", args);
        }

        public String recv_deleteFileMetadata() throws org.apache.thrift.TException {
            deleteFileMetadata_result result = new deleteFileMetadata_result();
            receiveBase(result, "deleteFileMetadata");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteFileMetadata failed: unknown result");
        }

        public String getFileMetadata(String userName, String pwd, String bucketName, String objectId) throws org.apache.thrift.TException {
            send_getFileMetadata(userName, pwd, bucketName, objectId);
            return recv_getFileMetadata();
        }

        public void send_getFileMetadata(String userName, String pwd, String bucketName, String objectId) throws org.apache.thrift.TException {
            getFileMetadata_args args = new getFileMetadata_args();
            args.setUserName(userName);
            args.setPwd(pwd);
            args.setBucketName(bucketName);
            args.setObjectId(objectId);
            sendBase("getFileMetadata", args);
        }

        public String recv_getFileMetadata() throws org.apache.thrift.TException {
            getFileMetadata_result result = new getFileMetadata_result();
            receiveBase(result, "getFileMetadata");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFileMetadata failed: unknown result");
        }

        public String getFileMetadatas(String userName, String pwd, String bucketName, String fsCriteria) throws org.apache.thrift.TException {
            send_getFileMetadatas(userName, pwd, bucketName, fsCriteria);
            return recv_getFileMetadatas();
        }

        public void send_getFileMetadatas(String userName, String pwd, String bucketName, String fsCriteria) throws org.apache.thrift.TException {
            getFileMetadatas_args args = new getFileMetadatas_args();
            args.setUserName(userName);
            args.setPwd(pwd);
            args.setBucketName(bucketName);
            args.setFsCriteria(fsCriteria);
            sendBase("getFileMetadatas", args);
        }

        public String recv_getFileMetadatas() throws org.apache.thrift.TException {
            getFileMetadatas_result result = new getFileMetadatas_result();
            receiveBase(result, "getFileMetadatas");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFileMetadatas failed: unknown result");
        }

        public String addUser(String userName, String pwd, String buckets) throws org.apache.thrift.TException {
            send_addUser(userName, pwd, buckets);
            return recv_addUser();
        }

        public void send_addUser(String userName, String pwd, String buckets) throws org.apache.thrift.TException {
            addUser_args args = new addUser_args();
            args.setUserName(userName);
            args.setPwd(pwd);
            args.setBuckets(buckets);
            sendBase("addUser", args);
        }

        public String recv_addUser() throws org.apache.thrift.TException {
            addUser_result result = new addUser_result();
            receiveBase(result, "addUser");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addUser failed: unknown result");
        }

        public String updateUser(String userName, String pwd, String buckets) throws org.apache.thrift.TException {
            send_updateUser(userName, pwd, buckets);
            return recv_updateUser();
        }

        public void send_updateUser(String userName, String pwd, String buckets) throws org.apache.thrift.TException {
            updateUser_args args = new updateUser_args();
            args.setUserName(userName);
            args.setPwd(pwd);
            args.setBuckets(buckets);
            sendBase("updateUser", args);
        }

        public String recv_updateUser() throws org.apache.thrift.TException {
            updateUser_result result = new updateUser_result();
            receiveBase(result, "updateUser");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateUser failed: unknown result");
        }

        public String getUser(String userName) throws org.apache.thrift.TException {
            send_getUser(userName);
            return recv_getUser();
        }

        public void send_getUser(String userName) throws org.apache.thrift.TException {
            getUser_args args = new getUser_args();
            args.setUserName(userName);
            sendBase("getUser", args);
        }

        public String recv_getUser() throws org.apache.thrift.TException {
            getUser_result result = new getUser_result();
            receiveBase(result, "getUser");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUser failed: unknown result");
        }

        public String deleteUser(String userName) throws org.apache.thrift.TException {
            send_deleteUser(userName);
            return recv_deleteUser();
        }

        public void send_deleteUser(String userName) throws org.apache.thrift.TException {
            deleteUser_args args = new deleteUser_args();
            args.setUserName(userName);
            sendBase("deleteUser", args);
        }

        public String recv_deleteUser() throws org.apache.thrift.TException {
            deleteUser_result result = new deleteUser_result();
            receiveBase(result, "deleteUser");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteUser failed: unknown result");
        }

        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void createFileMetadata(String userName, String pwd, String bucketName, String objectId, String fileMetadatas, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            createFileMetadata_call method_call = new createFileMetadata_call(userName, pwd, bucketName, objectId, fileMetadatas, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void updateFileMetadata(String userName, String pwd, String bucketName, String objectId, String fileMetadatas, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updateFileMetadata_call method_call = new updateFileMetadata_call(userName, pwd, bucketName, objectId, fileMetadatas, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void deleteFileMetadata(String userName, String pwd, String bucketName, String objectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            deleteFileMetadata_call method_call = new deleteFileMetadata_call(userName, pwd, bucketName, objectId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void getFileMetadata(String userName, String pwd, String bucketName, String objectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getFileMetadata_call method_call = new getFileMetadata_call(userName, pwd, bucketName, objectId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void getFileMetadatas(String userName, String pwd, String bucketName, String fsCriteria, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getFileMetadatas_call method_call = new getFileMetadatas_call(userName, pwd, bucketName, fsCriteria, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void addUser(String userName, String pwd, String buckets, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addUser_call method_call = new addUser_call(userName, pwd, buckets, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void updateUser(String userName, String pwd, String buckets, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updateUser_call method_call = new updateUser_call(userName, pwd, buckets, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void getUser(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getUser_call method_call = new getUser_call(userName, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void deleteUser(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            deleteUser_call method_call = new deleteUser_call(userName, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public static class createFileMetadata_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String userName;
            private String pwd;
            private String bucketName;
            private String objectId;
            private String fileMetadatas;

            public createFileMetadata_call(String userName, String pwd, String bucketName, String objectId, String fileMetadatas, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userName = userName;
                this.pwd = pwd;
                this.bucketName = bucketName;
                this.objectId = objectId;
                this.fileMetadatas = fileMetadatas;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createFileMetadata", org.apache.thrift.protocol.TMessageType.CALL, 0));
                createFileMetadata_args args = new createFileMetadata_args();
                args.setUserName(userName);
                args.setPwd(pwd);
                args.setBucketName(bucketName);
                args.setObjectId(objectId);
                args.setFileMetadatas(fileMetadatas);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_createFileMetadata();
            }
        }

        public static class updateFileMetadata_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String userName;
            private String pwd;
            private String bucketName;
            private String objectId;
            private String fileMetadatas;

            public updateFileMetadata_call(String userName, String pwd, String bucketName, String objectId, String fileMetadatas, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userName = userName;
                this.pwd = pwd;
                this.bucketName = bucketName;
                this.objectId = objectId;
                this.fileMetadatas = fileMetadatas;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateFileMetadata", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updateFileMetadata_args args = new updateFileMetadata_args();
                args.setUserName(userName);
                args.setPwd(pwd);
                args.setBucketName(bucketName);
                args.setObjectId(objectId);
                args.setFileMetadatas(fileMetadatas);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_updateFileMetadata();
            }
        }

        public static class deleteFileMetadata_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String userName;
            private String pwd;
            private String bucketName;
            private String objectId;

            public deleteFileMetadata_call(String userName, String pwd, String bucketName, String objectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userName = userName;
                this.pwd = pwd;
                this.bucketName = bucketName;
                this.objectId = objectId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteFileMetadata", org.apache.thrift.protocol.TMessageType.CALL, 0));
                deleteFileMetadata_args args = new deleteFileMetadata_args();
                args.setUserName(userName);
                args.setPwd(pwd);
                args.setBucketName(bucketName);
                args.setObjectId(objectId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_deleteFileMetadata();
            }
        }

        public static class getFileMetadata_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String userName;
            private String pwd;
            private String bucketName;
            private String objectId;

            public getFileMetadata_call(String userName, String pwd, String bucketName, String objectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userName = userName;
                this.pwd = pwd;
                this.bucketName = bucketName;
                this.objectId = objectId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFileMetadata", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getFileMetadata_args args = new getFileMetadata_args();
                args.setUserName(userName);
                args.setPwd(pwd);
                args.setBucketName(bucketName);
                args.setObjectId(objectId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getFileMetadata();
            }
        }

        public static class getFileMetadatas_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String userName;
            private String pwd;
            private String bucketName;
            private String fsCriteria;

            public getFileMetadatas_call(String userName, String pwd, String bucketName, String fsCriteria, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userName = userName;
                this.pwd = pwd;
                this.bucketName = bucketName;
                this.fsCriteria = fsCriteria;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFileMetadatas", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getFileMetadatas_args args = new getFileMetadatas_args();
                args.setUserName(userName);
                args.setPwd(pwd);
                args.setBucketName(bucketName);
                args.setFsCriteria(fsCriteria);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getFileMetadatas();
            }
        }

        public static class addUser_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String userName;
            private String pwd;
            private String buckets;

            public addUser_call(String userName, String pwd, String buckets, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userName = userName;
                this.pwd = pwd;
                this.buckets = buckets;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addUser_args args = new addUser_args();
                args.setUserName(userName);
                args.setPwd(pwd);
                args.setBuckets(buckets);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_addUser();
            }
        }

        public static class updateUser_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String userName;
            private String pwd;
            private String buckets;

            public updateUser_call(String userName, String pwd, String buckets, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userName = userName;
                this.pwd = pwd;
                this.buckets = buckets;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updateUser_args args = new updateUser_args();
                args.setUserName(userName);
                args.setPwd(pwd);
                args.setBuckets(buckets);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_updateUser();
            }
        }

        public static class getUser_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String userName;

            public getUser_call(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userName = userName;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getUser_args args = new getUser_args();
                args.setUserName(userName);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getUser();
            }
        }

        public static class deleteUser_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String userName;

            public deleteUser_call(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userName = userName;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
                deleteUser_args args = new deleteUser_args();
                args.setUserName(userName);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_deleteUser();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("createFileMetadata", new createFileMetadata());
            processMap.put("updateFileMetadata", new updateFileMetadata());
            processMap.put("deleteFileMetadata", new deleteFileMetadata());
            processMap.put("getFileMetadata", new getFileMetadata());
            processMap.put("getFileMetadatas", new getFileMetadatas());
            processMap.put("addUser", new addUser());
            processMap.put("updateUser", new updateUser());
            processMap.put("getUser", new getUser());
            processMap.put("deleteUser", new deleteUser());
            return processMap;
        }

        public static class createFileMetadata<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createFileMetadata_args> {
            public createFileMetadata() {
                super("createFileMetadata");
            }

            public createFileMetadata_args getEmptyArgsInstance() {
                return new createFileMetadata_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public createFileMetadata_result getResult(I iface, createFileMetadata_args args) throws org.apache.thrift.TException {
                createFileMetadata_result result = new createFileMetadata_result();
                result.success = iface.createFileMetadata(args.userName, args.pwd, args.bucketName, args.objectId, args.fileMetadatas);
                return result;
            }
        }

        public static class updateFileMetadata<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateFileMetadata_args> {
            public updateFileMetadata() {
                super("updateFileMetadata");
            }

            public updateFileMetadata_args getEmptyArgsInstance() {
                return new updateFileMetadata_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public updateFileMetadata_result getResult(I iface, updateFileMetadata_args args) throws org.apache.thrift.TException {
                updateFileMetadata_result result = new updateFileMetadata_result();
                result.success = iface.updateFileMetadata(args.userName, args.pwd, args.bucketName, args.objectId, args.fileMetadatas);
                return result;
            }
        }

        public static class deleteFileMetadata<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteFileMetadata_args> {
            public deleteFileMetadata() {
                super("deleteFileMetadata");
            }

            public deleteFileMetadata_args getEmptyArgsInstance() {
                return new deleteFileMetadata_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public deleteFileMetadata_result getResult(I iface, deleteFileMetadata_args args) throws org.apache.thrift.TException {
                deleteFileMetadata_result result = new deleteFileMetadata_result();
                result.success = iface.deleteFileMetadata(args.userName, args.pwd, args.bucketName, args.objectId);
                return result;
            }
        }

        public static class getFileMetadata<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFileMetadata_args> {
            public getFileMetadata() {
                super("getFileMetadata");
            }

            public getFileMetadata_args getEmptyArgsInstance() {
                return new getFileMetadata_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getFileMetadata_result getResult(I iface, getFileMetadata_args args) throws org.apache.thrift.TException {
                getFileMetadata_result result = new getFileMetadata_result();
                result.success = iface.getFileMetadata(args.userName, args.pwd, args.bucketName, args.objectId);
                return result;
            }
        }

        public static class getFileMetadatas<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFileMetadatas_args> {
            public getFileMetadatas() {
                super("getFileMetadatas");
            }

            public getFileMetadatas_args getEmptyArgsInstance() {
                return new getFileMetadatas_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getFileMetadatas_result getResult(I iface, getFileMetadatas_args args) throws org.apache.thrift.TException {
                getFileMetadatas_result result = new getFileMetadatas_result();
                result.success = iface.getFileMetadatas(args.userName, args.pwd, args.bucketName, args.fsCriteria);
                return result;
            }
        }

        public static class addUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addUser_args> {
            public addUser() {
                super("addUser");
            }

            public addUser_args getEmptyArgsInstance() {
                return new addUser_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public addUser_result getResult(I iface, addUser_args args) throws org.apache.thrift.TException {
                addUser_result result = new addUser_result();
                result.success = iface.addUser(args.userName, args.pwd, args.buckets);
                return result;
            }
        }

        public static class updateUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUser_args> {
            public updateUser() {
                super("updateUser");
            }

            public updateUser_args getEmptyArgsInstance() {
                return new updateUser_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public updateUser_result getResult(I iface, updateUser_args args) throws org.apache.thrift.TException {
                updateUser_result result = new updateUser_result();
                result.success = iface.updateUser(args.userName, args.pwd, args.buckets);
                return result;
            }
        }

        public static class getUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUser_args> {
            public getUser() {
                super("getUser");
            }

            public getUser_args getEmptyArgsInstance() {
                return new getUser_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getUser_result getResult(I iface, getUser_args args) throws org.apache.thrift.TException {
                getUser_result result = new getUser_result();
                result.success = iface.getUser(args.userName);
                return result;
            }
        }

        public static class deleteUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteUser_args> {
            public deleteUser() {
                super("deleteUser");
            }

            public deleteUser_args getEmptyArgsInstance() {
                return new deleteUser_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public deleteUser_result getResult(I iface, deleteUser_args args) throws org.apache.thrift.TException {
                deleteUser_result result = new deleteUser_result();
                result.success = iface.deleteUser(args.userName);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("createFileMetadata", new createFileMetadata());
            processMap.put("updateFileMetadata", new updateFileMetadata());
            processMap.put("deleteFileMetadata", new deleteFileMetadata());
            processMap.put("getFileMetadata", new getFileMetadata());
            processMap.put("getFileMetadatas", new getFileMetadatas());
            processMap.put("addUser", new addUser());
            processMap.put("updateUser", new updateUser());
            processMap.put("getUser", new getUser());
            processMap.put("deleteUser", new deleteUser());
            return processMap;
        }

        public static class createFileMetadata<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createFileMetadata_args, String> {
            public createFileMetadata() {
                super("createFileMetadata");
            }

            public createFileMetadata_args getEmptyArgsInstance() {
                return new createFileMetadata_args();
            }

            public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<String>() {
                    public void onComplete(String o) {
                        createFileMetadata_result result = new createFileMetadata_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        createFileMetadata_result result = new createFileMetadata_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, createFileMetadata_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
                iface.createFileMetadata(args.userName, args.pwd, args.bucketName, args.objectId, args.fileMetadatas, resultHandler);
            }
        }

        public static class updateFileMetadata<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateFileMetadata_args, String> {
            public updateFileMetadata() {
                super("updateFileMetadata");
            }

            public updateFileMetadata_args getEmptyArgsInstance() {
                return new updateFileMetadata_args();
            }

            public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<String>() {
                    public void onComplete(String o) {
                        updateFileMetadata_result result = new updateFileMetadata_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        updateFileMetadata_result result = new updateFileMetadata_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, updateFileMetadata_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
                iface.updateFileMetadata(args.userName, args.pwd, args.bucketName, args.objectId, args.fileMetadatas, resultHandler);
            }
        }

        public static class deleteFileMetadata<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteFileMetadata_args, String> {
            public deleteFileMetadata() {
                super("deleteFileMetadata");
            }

            public deleteFileMetadata_args getEmptyArgsInstance() {
                return new deleteFileMetadata_args();
            }

            public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<String>() {
                    public void onComplete(String o) {
                        deleteFileMetadata_result result = new deleteFileMetadata_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        deleteFileMetadata_result result = new deleteFileMetadata_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, deleteFileMetadata_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
                iface.deleteFileMetadata(args.userName, args.pwd, args.bucketName, args.objectId, resultHandler);
            }
        }

        public static class getFileMetadata<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFileMetadata_args, String> {
            public getFileMetadata() {
                super("getFileMetadata");
            }

            public getFileMetadata_args getEmptyArgsInstance() {
                return new getFileMetadata_args();
            }

            public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<String>() {
                    public void onComplete(String o) {
                        getFileMetadata_result result = new getFileMetadata_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getFileMetadata_result result = new getFileMetadata_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getFileMetadata_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
                iface.getFileMetadata(args.userName, args.pwd, args.bucketName, args.objectId, resultHandler);
            }
        }

        public static class getFileMetadatas<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFileMetadatas_args, String> {
            public getFileMetadatas() {
                super("getFileMetadatas");
            }

            public getFileMetadatas_args getEmptyArgsInstance() {
                return new getFileMetadatas_args();
            }

            public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<String>() {
                    public void onComplete(String o) {
                        getFileMetadatas_result result = new getFileMetadatas_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getFileMetadatas_result result = new getFileMetadatas_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getFileMetadatas_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
                iface.getFileMetadatas(args.userName, args.pwd, args.bucketName, args.fsCriteria, resultHandler);
            }
        }

        public static class addUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addUser_args, String> {
            public addUser() {
                super("addUser");
            }

            public addUser_args getEmptyArgsInstance() {
                return new addUser_args();
            }

            public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<String>() {
                    public void onComplete(String o) {
                        addUser_result result = new addUser_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        addUser_result result = new addUser_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addUser_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
                iface.addUser(args.userName, args.pwd, args.buckets, resultHandler);
            }
        }

        public static class updateUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateUser_args, String> {
            public updateUser() {
                super("updateUser");
            }

            public updateUser_args getEmptyArgsInstance() {
                return new updateUser_args();
            }

            public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<String>() {
                    public void onComplete(String o) {
                        updateUser_result result = new updateUser_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        updateUser_result result = new updateUser_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, updateUser_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
                iface.updateUser(args.userName, args.pwd, args.buckets, resultHandler);
            }
        }

        public static class getUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUser_args, String> {
            public getUser() {
                super("getUser");
            }

            public getUser_args getEmptyArgsInstance() {
                return new getUser_args();
            }

            public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<String>() {
                    public void onComplete(String o) {
                        getUser_result result = new getUser_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getUser_result result = new getUser_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getUser_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
                iface.getUser(args.userName, resultHandler);
            }
        }

        public static class deleteUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteUser_args, String> {
            public deleteUser() {
                super("deleteUser");
            }

            public deleteUser_args getEmptyArgsInstance() {
                return new deleteUser_args();
            }

            public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<String>() {
                    public void onComplete(String o) {
                        deleteUser_result result = new deleteUser_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        deleteUser_result result = new deleteUser_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, deleteUser_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
                iface.deleteUser(args.userName, resultHandler);
            }
        }

    }

    public static class createFileMetadata_args implements org.apache.thrift.TBase<createFileMetadata_args, createFileMetadata_args._Fields>, java.io.Serializable, Cloneable, Comparable<createFileMetadata_args> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PWD, new org.apache.thrift.meta_data.FieldMetaData("pwd", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.BUCKET_NAME, new org.apache.thrift.meta_data.FieldMetaData("bucketName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("objectId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.FILE_METADATAS, new org.apache.thrift.meta_data.FieldMetaData("fileMetadatas", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createFileMetadata_args.class, metaDataMap);
        }
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createFileMetadata_args");
        private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("pwd", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField BUCKET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketName", org.apache.thrift.protocol.TType.STRING, (short) 3);
        private static final org.apache.thrift.protocol.TField OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("objectId", org.apache.thrift.protocol.TType.STRING, (short) 4);
        private static final org.apache.thrift.protocol.TField FILE_METADATAS_FIELD_DESC = new org.apache.thrift.protocol.TField("fileMetadatas", org.apache.thrift.protocol.TType.STRING, (short) 5);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new createFileMetadata_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new createFileMetadata_argsTupleSchemeFactory());
        }
        public String userName; // required
        public String pwd; // required
        public String bucketName; // required
        public String objectId; // required
        public String fileMetadatas; // required

        public createFileMetadata_args() {
        }

        public createFileMetadata_args(
                String userName,
                String pwd,
                String bucketName,
                String objectId,
                String fileMetadatas) {
            this();
            this.userName = userName;
            this.pwd = pwd;
            this.bucketName = bucketName;
            this.objectId = objectId;
            this.fileMetadatas = fileMetadatas;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public createFileMetadata_args(createFileMetadata_args other) {
            if (other.isSetUserName()) {
                this.userName = other.userName;
            }
            if (other.isSetPwd()) {
                this.pwd = other.pwd;
            }
            if (other.isSetBucketName()) {
                this.bucketName = other.bucketName;
            }
            if (other.isSetObjectId()) {
                this.objectId = other.objectId;
            }
            if (other.isSetFileMetadatas()) {
                this.fileMetadatas = other.fileMetadatas;
            }
        }

        public createFileMetadata_args deepCopy() {
            return new createFileMetadata_args(this);
        }

        @Override
        public void clear() {
            this.userName = null;
            this.pwd = null;
            this.bucketName = null;
            this.objectId = null;
            this.fileMetadatas = null;
        }

        public String getUserName() {
            return this.userName;
        }

        public createFileMetadata_args setUserName(String userName) {
            this.userName = userName;
            return this;
        }

        public void unsetUserName() {
            this.userName = null;
        }

        /**
         * Returns true if field userName is set (has been assigned a value) and false otherwise
         */
        public boolean isSetUserName() {
            return this.userName != null;
        }

        public void setUserNameIsSet(boolean value) {
            if (!value) {
                this.userName = null;
            }
        }

        public String getPwd() {
            return this.pwd;
        }

        public createFileMetadata_args setPwd(String pwd) {
            this.pwd = pwd;
            return this;
        }

        public void unsetPwd() {
            this.pwd = null;
        }

        /**
         * Returns true if field pwd is set (has been assigned a value) and false otherwise
         */
        public boolean isSetPwd() {
            return this.pwd != null;
        }

        public void setPwdIsSet(boolean value) {
            if (!value) {
                this.pwd = null;
            }
        }

        public String getBucketName() {
            return this.bucketName;
        }

        public createFileMetadata_args setBucketName(String bucketName) {
            this.bucketName = bucketName;
            return this;
        }

        public void unsetBucketName() {
            this.bucketName = null;
        }

        /**
         * Returns true if field bucketName is set (has been assigned a value) and false otherwise
         */
        public boolean isSetBucketName() {
            return this.bucketName != null;
        }

        public void setBucketNameIsSet(boolean value) {
            if (!value) {
                this.bucketName = null;
            }
        }

        public String getObjectId() {
            return this.objectId;
        }

        public createFileMetadata_args setObjectId(String objectId) {
            this.objectId = objectId;
            return this;
        }

        public void unsetObjectId() {
            this.objectId = null;
        }

        /**
         * Returns true if field objectId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetObjectId() {
            return this.objectId != null;
        }

        public void setObjectIdIsSet(boolean value) {
            if (!value) {
                this.objectId = null;
            }
        }

        public String getFileMetadatas() {
            return this.fileMetadatas;
        }

        public createFileMetadata_args setFileMetadatas(String fileMetadatas) {
            this.fileMetadatas = fileMetadatas;
            return this;
        }

        public void unsetFileMetadatas() {
            this.fileMetadatas = null;
        }

        /**
         * Returns true if field fileMetadatas is set (has been assigned a value) and false otherwise
         */
        public boolean isSetFileMetadatas() {
            return this.fileMetadatas != null;
        }

        public void setFileMetadatasIsSet(boolean value) {
            if (!value) {
                this.fileMetadatas = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case USER_NAME:
                    if (value == null) {
                        unsetUserName();
                    } else {
                        setUserName((String) value);
                    }
                    break;

                case PWD:
                    if (value == null) {
                        unsetPwd();
                    } else {
                        setPwd((String) value);
                    }
                    break;

                case BUCKET_NAME:
                    if (value == null) {
                        unsetBucketName();
                    } else {
                        setBucketName((String) value);
                    }
                    break;

                case OBJECT_ID:
                    if (value == null) {
                        unsetObjectId();
                    } else {
                        setObjectId((String) value);
                    }
                    break;

                case FILE_METADATAS:
                    if (value == null) {
                        unsetFileMetadatas();
                    } else {
                        setFileMetadatas((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_NAME:
                    return getUserName();

                case PWD:
                    return getPwd();

                case BUCKET_NAME:
                    return getBucketName();

                case OBJECT_ID:
                    return getObjectId();

                case FILE_METADATAS:
                    return getFileMetadatas();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case USER_NAME:
                    return isSetUserName();
                case PWD:
                    return isSetPwd();
                case BUCKET_NAME:
                    return isSetBucketName();
                case OBJECT_ID:
                    return isSetObjectId();
                case FILE_METADATAS:
                    return isSetFileMetadatas();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof createFileMetadata_args)
                return this.equals((createFileMetadata_args) that);
            return false;
        }

        public boolean equals(createFileMetadata_args that) {
            if (that == null)
                return false;

            boolean this_present_userName = true && this.isSetUserName();
            boolean that_present_userName = true && that.isSetUserName();
            if (this_present_userName || that_present_userName) {
                if (!(this_present_userName && that_present_userName))
                    return false;
                if (!this.userName.equals(that.userName))
                    return false;
            }

            boolean this_present_pwd = true && this.isSetPwd();
            boolean that_present_pwd = true && that.isSetPwd();
            if (this_present_pwd || that_present_pwd) {
                if (!(this_present_pwd && that_present_pwd))
                    return false;
                if (!this.pwd.equals(that.pwd))
                    return false;
            }

            boolean this_present_bucketName = true && this.isSetBucketName();
            boolean that_present_bucketName = true && that.isSetBucketName();
            if (this_present_bucketName || that_present_bucketName) {
                if (!(this_present_bucketName && that_present_bucketName))
                    return false;
                if (!this.bucketName.equals(that.bucketName))
                    return false;
            }

            boolean this_present_objectId = true && this.isSetObjectId();
            boolean that_present_objectId = true && that.isSetObjectId();
            if (this_present_objectId || that_present_objectId) {
                if (!(this_present_objectId && that_present_objectId))
                    return false;
                if (!this.objectId.equals(that.objectId))
                    return false;
            }

            boolean this_present_fileMetadatas = true && this.isSetFileMetadatas();
            boolean that_present_fileMetadatas = true && that.isSetFileMetadatas();
            if (this_present_fileMetadatas || that_present_fileMetadatas) {
                if (!(this_present_fileMetadatas && that_present_fileMetadatas))
                    return false;
                if (!this.fileMetadatas.equals(that.fileMetadatas))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(createFileMetadata_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPwd()).compareTo(other.isSetPwd());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPwd()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwd, other.pwd);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetBucketName()).compareTo(other.isSetBucketName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBucketName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketName, other.bucketName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetObjectId()).compareTo(other.isSetObjectId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetObjectId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectId, other.objectId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetFileMetadatas()).compareTo(other.isSetFileMetadatas());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFileMetadatas()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileMetadatas, other.fileMetadatas);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("createFileMetadata_args(");
            boolean first = true;

            sb.append("userName:");
            if (this.userName == null) {
                sb.append("null");
            } else {
                sb.append(this.userName);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("pwd:");
            if (this.pwd == null) {
                sb.append("null");
            } else {
                sb.append(this.pwd);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("bucketName:");
            if (this.bucketName == null) {
                sb.append("null");
            } else {
                sb.append(this.bucketName);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("objectId:");
            if (this.objectId == null) {
                sb.append("null");
            } else {
                sb.append(this.objectId);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("fileMetadatas:");
            if (this.fileMetadatas == null) {
                sb.append("null");
            } else {
                sb.append(this.fileMetadatas);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_NAME((short) 1, "userName"),
            PWD((short) 2, "pwd"),
            BUCKET_NAME((short) 3, "bucketName"),
            OBJECT_ID((short) 4, "objectId"),
            FILE_METADATAS((short) 5, "fileMetadatas");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USER_NAME
                        return USER_NAME;
                    case 2: // PWD
                        return PWD;
                    case 3: // BUCKET_NAME
                        return BUCKET_NAME;
                    case 4: // OBJECT_ID
                        return OBJECT_ID;
                    case 5: // FILE_METADATAS
                        return FILE_METADATAS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class createFileMetadata_argsStandardSchemeFactory implements SchemeFactory {
            public createFileMetadata_argsStandardScheme getScheme() {
                return new createFileMetadata_argsStandardScheme();
            }
        }

        private static class createFileMetadata_argsStandardScheme extends StandardScheme<createFileMetadata_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, createFileMetadata_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.userName = iprot.readString();
                                struct.setUserNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PWD
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.pwd = iprot.readString();
                                struct.setPwdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // BUCKET_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.bucketName = iprot.readString();
                                struct.setBucketNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // OBJECT_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.objectId = iprot.readString();
                                struct.setObjectIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // FILE_METADATAS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.fileMetadatas = iprot.readString();
                                struct.setFileMetadatasIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, createFileMetadata_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.userName != null) {
                    oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
                    oprot.writeString(struct.userName);
                    oprot.writeFieldEnd();
                }
                if (struct.pwd != null) {
                    oprot.writeFieldBegin(PWD_FIELD_DESC);
                    oprot.writeString(struct.pwd);
                    oprot.writeFieldEnd();
                }
                if (struct.bucketName != null) {
                    oprot.writeFieldBegin(BUCKET_NAME_FIELD_DESC);
                    oprot.writeString(struct.bucketName);
                    oprot.writeFieldEnd();
                }
                if (struct.objectId != null) {
                    oprot.writeFieldBegin(OBJECT_ID_FIELD_DESC);
                    oprot.writeString(struct.objectId);
                    oprot.writeFieldEnd();
                }
                if (struct.fileMetadatas != null) {
                    oprot.writeFieldBegin(FILE_METADATAS_FIELD_DESC);
                    oprot.writeString(struct.fileMetadatas);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class createFileMetadata_argsTupleSchemeFactory implements SchemeFactory {
            public createFileMetadata_argsTupleScheme getScheme() {
                return new createFileMetadata_argsTupleScheme();
            }
        }

        private static class createFileMetadata_argsTupleScheme extends TupleScheme<createFileMetadata_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, createFileMetadata_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUserName()) {
                    optionals.set(0);
                }
                if (struct.isSetPwd()) {
                    optionals.set(1);
                }
                if (struct.isSetBucketName()) {
                    optionals.set(2);
                }
                if (struct.isSetObjectId()) {
                    optionals.set(3);
                }
                if (struct.isSetFileMetadatas()) {
                    optionals.set(4);
                }
                oprot.writeBitSet(optionals, 5);
                if (struct.isSetUserName()) {
                    oprot.writeString(struct.userName);
                }
                if (struct.isSetPwd()) {
                    oprot.writeString(struct.pwd);
                }
                if (struct.isSetBucketName()) {
                    oprot.writeString(struct.bucketName);
                }
                if (struct.isSetObjectId()) {
                    oprot.writeString(struct.objectId);
                }
                if (struct.isSetFileMetadatas()) {
                    oprot.writeString(struct.fileMetadatas);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, createFileMetadata_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(5);
                if (incoming.get(0)) {
                    struct.userName = iprot.readString();
                    struct.setUserNameIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.pwd = iprot.readString();
                    struct.setPwdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.bucketName = iprot.readString();
                    struct.setBucketNameIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.objectId = iprot.readString();
                    struct.setObjectIdIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.fileMetadatas = iprot.readString();
                    struct.setFileMetadatasIsSet(true);
                }
            }
        }

    }

    public static class createFileMetadata_result implements org.apache.thrift.TBase<createFileMetadata_result, createFileMetadata_result._Fields>, java.io.Serializable, Cloneable, Comparable<createFileMetadata_result> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createFileMetadata_result.class, metaDataMap);
        }
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createFileMetadata_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new createFileMetadata_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new createFileMetadata_resultTupleSchemeFactory());
        }
        public String success; // required

        public createFileMetadata_result() {
        }

        public createFileMetadata_result(
                String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public createFileMetadata_result(createFileMetadata_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public createFileMetadata_result deepCopy() {
            return new createFileMetadata_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public createFileMetadata_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof createFileMetadata_result)
                return this.equals((createFileMetadata_result) that);
            return false;
        }

        public boolean equals(createFileMetadata_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(createFileMetadata_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("createFileMetadata_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class createFileMetadata_resultStandardSchemeFactory implements SchemeFactory {
            public createFileMetadata_resultStandardScheme getScheme() {
                return new createFileMetadata_resultStandardScheme();
            }
        }

        private static class createFileMetadata_resultStandardScheme extends StandardScheme<createFileMetadata_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, createFileMetadata_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, createFileMetadata_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class createFileMetadata_resultTupleSchemeFactory implements SchemeFactory {
            public createFileMetadata_resultTupleScheme getScheme() {
                return new createFileMetadata_resultTupleScheme();
            }
        }

        private static class createFileMetadata_resultTupleScheme extends TupleScheme<createFileMetadata_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, createFileMetadata_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, createFileMetadata_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class updateFileMetadata_args implements org.apache.thrift.TBase<updateFileMetadata_args, updateFileMetadata_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateFileMetadata_args> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PWD, new org.apache.thrift.meta_data.FieldMetaData("pwd", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.BUCKET_NAME, new org.apache.thrift.meta_data.FieldMetaData("bucketName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("objectId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.FILE_METADATAS, new org.apache.thrift.meta_data.FieldMetaData("fileMetadatas", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFileMetadata_args.class, metaDataMap);
        }
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFileMetadata_args");
        private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("pwd", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField BUCKET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketName", org.apache.thrift.protocol.TType.STRING, (short) 3);
        private static final org.apache.thrift.protocol.TField OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("objectId", org.apache.thrift.protocol.TType.STRING, (short) 4);
        private static final org.apache.thrift.protocol.TField FILE_METADATAS_FIELD_DESC = new org.apache.thrift.protocol.TField("fileMetadatas", org.apache.thrift.protocol.TType.STRING, (short) 5);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new updateFileMetadata_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new updateFileMetadata_argsTupleSchemeFactory());
        }
        public String userName; // required
        public String pwd; // required
        public String bucketName; // required
        public String objectId; // required
        public String fileMetadatas; // required

        public updateFileMetadata_args() {
        }

        public updateFileMetadata_args(
                String userName,
                String pwd,
                String bucketName,
                String objectId,
                String fileMetadatas) {
            this();
            this.userName = userName;
            this.pwd = pwd;
            this.bucketName = bucketName;
            this.objectId = objectId;
            this.fileMetadatas = fileMetadatas;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateFileMetadata_args(updateFileMetadata_args other) {
            if (other.isSetUserName()) {
                this.userName = other.userName;
            }
            if (other.isSetPwd()) {
                this.pwd = other.pwd;
            }
            if (other.isSetBucketName()) {
                this.bucketName = other.bucketName;
            }
            if (other.isSetObjectId()) {
                this.objectId = other.objectId;
            }
            if (other.isSetFileMetadatas()) {
                this.fileMetadatas = other.fileMetadatas;
            }
        }

        public updateFileMetadata_args deepCopy() {
            return new updateFileMetadata_args(this);
        }

        @Override
        public void clear() {
            this.userName = null;
            this.pwd = null;
            this.bucketName = null;
            this.objectId = null;
            this.fileMetadatas = null;
        }

        public String getUserName() {
            return this.userName;
        }

        public updateFileMetadata_args setUserName(String userName) {
            this.userName = userName;
            return this;
        }

        public void unsetUserName() {
            this.userName = null;
        }

        /**
         * Returns true if field userName is set (has been assigned a value) and false otherwise
         */
        public boolean isSetUserName() {
            return this.userName != null;
        }

        public void setUserNameIsSet(boolean value) {
            if (!value) {
                this.userName = null;
            }
        }

        public String getPwd() {
            return this.pwd;
        }

        public updateFileMetadata_args setPwd(String pwd) {
            this.pwd = pwd;
            return this;
        }

        public void unsetPwd() {
            this.pwd = null;
        }

        /**
         * Returns true if field pwd is set (has been assigned a value) and false otherwise
         */
        public boolean isSetPwd() {
            return this.pwd != null;
        }

        public void setPwdIsSet(boolean value) {
            if (!value) {
                this.pwd = null;
            }
        }

        public String getBucketName() {
            return this.bucketName;
        }

        public updateFileMetadata_args setBucketName(String bucketName) {
            this.bucketName = bucketName;
            return this;
        }

        public void unsetBucketName() {
            this.bucketName = null;
        }

        /**
         * Returns true if field bucketName is set (has been assigned a value) and false otherwise
         */
        public boolean isSetBucketName() {
            return this.bucketName != null;
        }

        public void setBucketNameIsSet(boolean value) {
            if (!value) {
                this.bucketName = null;
            }
        }

        public String getObjectId() {
            return this.objectId;
        }

        public updateFileMetadata_args setObjectId(String objectId) {
            this.objectId = objectId;
            return this;
        }

        public void unsetObjectId() {
            this.objectId = null;
        }

        /**
         * Returns true if field objectId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetObjectId() {
            return this.objectId != null;
        }

        public void setObjectIdIsSet(boolean value) {
            if (!value) {
                this.objectId = null;
            }
        }

        public String getFileMetadatas() {
            return this.fileMetadatas;
        }

        public updateFileMetadata_args setFileMetadatas(String fileMetadatas) {
            this.fileMetadatas = fileMetadatas;
            return this;
        }

        public void unsetFileMetadatas() {
            this.fileMetadatas = null;
        }

        /**
         * Returns true if field fileMetadatas is set (has been assigned a value) and false otherwise
         */
        public boolean isSetFileMetadatas() {
            return this.fileMetadatas != null;
        }

        public void setFileMetadatasIsSet(boolean value) {
            if (!value) {
                this.fileMetadatas = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case USER_NAME:
                    if (value == null) {
                        unsetUserName();
                    } else {
                        setUserName((String) value);
                    }
                    break;

                case PWD:
                    if (value == null) {
                        unsetPwd();
                    } else {
                        setPwd((String) value);
                    }
                    break;

                case BUCKET_NAME:
                    if (value == null) {
                        unsetBucketName();
                    } else {
                        setBucketName((String) value);
                    }
                    break;

                case OBJECT_ID:
                    if (value == null) {
                        unsetObjectId();
                    } else {
                        setObjectId((String) value);
                    }
                    break;

                case FILE_METADATAS:
                    if (value == null) {
                        unsetFileMetadatas();
                    } else {
                        setFileMetadatas((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_NAME:
                    return getUserName();

                case PWD:
                    return getPwd();

                case BUCKET_NAME:
                    return getBucketName();

                case OBJECT_ID:
                    return getObjectId();

                case FILE_METADATAS:
                    return getFileMetadatas();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case USER_NAME:
                    return isSetUserName();
                case PWD:
                    return isSetPwd();
                case BUCKET_NAME:
                    return isSetBucketName();
                case OBJECT_ID:
                    return isSetObjectId();
                case FILE_METADATAS:
                    return isSetFileMetadatas();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof updateFileMetadata_args)
                return this.equals((updateFileMetadata_args) that);
            return false;
        }

        public boolean equals(updateFileMetadata_args that) {
            if (that == null)
                return false;

            boolean this_present_userName = true && this.isSetUserName();
            boolean that_present_userName = true && that.isSetUserName();
            if (this_present_userName || that_present_userName) {
                if (!(this_present_userName && that_present_userName))
                    return false;
                if (!this.userName.equals(that.userName))
                    return false;
            }

            boolean this_present_pwd = true && this.isSetPwd();
            boolean that_present_pwd = true && that.isSetPwd();
            if (this_present_pwd || that_present_pwd) {
                if (!(this_present_pwd && that_present_pwd))
                    return false;
                if (!this.pwd.equals(that.pwd))
                    return false;
            }

            boolean this_present_bucketName = true && this.isSetBucketName();
            boolean that_present_bucketName = true && that.isSetBucketName();
            if (this_present_bucketName || that_present_bucketName) {
                if (!(this_present_bucketName && that_present_bucketName))
                    return false;
                if (!this.bucketName.equals(that.bucketName))
                    return false;
            }

            boolean this_present_objectId = true && this.isSetObjectId();
            boolean that_present_objectId = true && that.isSetObjectId();
            if (this_present_objectId || that_present_objectId) {
                if (!(this_present_objectId && that_present_objectId))
                    return false;
                if (!this.objectId.equals(that.objectId))
                    return false;
            }

            boolean this_present_fileMetadatas = true && this.isSetFileMetadatas();
            boolean that_present_fileMetadatas = true && that.isSetFileMetadatas();
            if (this_present_fileMetadatas || that_present_fileMetadatas) {
                if (!(this_present_fileMetadatas && that_present_fileMetadatas))
                    return false;
                if (!this.fileMetadatas.equals(that.fileMetadatas))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(updateFileMetadata_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPwd()).compareTo(other.isSetPwd());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPwd()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwd, other.pwd);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetBucketName()).compareTo(other.isSetBucketName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBucketName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketName, other.bucketName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetObjectId()).compareTo(other.isSetObjectId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetObjectId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectId, other.objectId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetFileMetadatas()).compareTo(other.isSetFileMetadatas());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFileMetadatas()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileMetadatas, other.fileMetadatas);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("updateFileMetadata_args(");
            boolean first = true;

            sb.append("userName:");
            if (this.userName == null) {
                sb.append("null");
            } else {
                sb.append(this.userName);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("pwd:");
            if (this.pwd == null) {
                sb.append("null");
            } else {
                sb.append(this.pwd);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("bucketName:");
            if (this.bucketName == null) {
                sb.append("null");
            } else {
                sb.append(this.bucketName);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("objectId:");
            if (this.objectId == null) {
                sb.append("null");
            } else {
                sb.append(this.objectId);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("fileMetadatas:");
            if (this.fileMetadatas == null) {
                sb.append("null");
            } else {
                sb.append(this.fileMetadatas);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_NAME((short) 1, "userName"),
            PWD((short) 2, "pwd"),
            BUCKET_NAME((short) 3, "bucketName"),
            OBJECT_ID((short) 4, "objectId"),
            FILE_METADATAS((short) 5, "fileMetadatas");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USER_NAME
                        return USER_NAME;
                    case 2: // PWD
                        return PWD;
                    case 3: // BUCKET_NAME
                        return BUCKET_NAME;
                    case 4: // OBJECT_ID
                        return OBJECT_ID;
                    case 5: // FILE_METADATAS
                        return FILE_METADATAS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class updateFileMetadata_argsStandardSchemeFactory implements SchemeFactory {
            public updateFileMetadata_argsStandardScheme getScheme() {
                return new updateFileMetadata_argsStandardScheme();
            }
        }

        private static class updateFileMetadata_argsStandardScheme extends StandardScheme<updateFileMetadata_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateFileMetadata_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.userName = iprot.readString();
                                struct.setUserNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PWD
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.pwd = iprot.readString();
                                struct.setPwdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // BUCKET_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.bucketName = iprot.readString();
                                struct.setBucketNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // OBJECT_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.objectId = iprot.readString();
                                struct.setObjectIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // FILE_METADATAS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.fileMetadatas = iprot.readString();
                                struct.setFileMetadatasIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateFileMetadata_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.userName != null) {
                    oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
                    oprot.writeString(struct.userName);
                    oprot.writeFieldEnd();
                }
                if (struct.pwd != null) {
                    oprot.writeFieldBegin(PWD_FIELD_DESC);
                    oprot.writeString(struct.pwd);
                    oprot.writeFieldEnd();
                }
                if (struct.bucketName != null) {
                    oprot.writeFieldBegin(BUCKET_NAME_FIELD_DESC);
                    oprot.writeString(struct.bucketName);
                    oprot.writeFieldEnd();
                }
                if (struct.objectId != null) {
                    oprot.writeFieldBegin(OBJECT_ID_FIELD_DESC);
                    oprot.writeString(struct.objectId);
                    oprot.writeFieldEnd();
                }
                if (struct.fileMetadatas != null) {
                    oprot.writeFieldBegin(FILE_METADATAS_FIELD_DESC);
                    oprot.writeString(struct.fileMetadatas);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateFileMetadata_argsTupleSchemeFactory implements SchemeFactory {
            public updateFileMetadata_argsTupleScheme getScheme() {
                return new updateFileMetadata_argsTupleScheme();
            }
        }

        private static class updateFileMetadata_argsTupleScheme extends TupleScheme<updateFileMetadata_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateFileMetadata_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUserName()) {
                    optionals.set(0);
                }
                if (struct.isSetPwd()) {
                    optionals.set(1);
                }
                if (struct.isSetBucketName()) {
                    optionals.set(2);
                }
                if (struct.isSetObjectId()) {
                    optionals.set(3);
                }
                if (struct.isSetFileMetadatas()) {
                    optionals.set(4);
                }
                oprot.writeBitSet(optionals, 5);
                if (struct.isSetUserName()) {
                    oprot.writeString(struct.userName);
                }
                if (struct.isSetPwd()) {
                    oprot.writeString(struct.pwd);
                }
                if (struct.isSetBucketName()) {
                    oprot.writeString(struct.bucketName);
                }
                if (struct.isSetObjectId()) {
                    oprot.writeString(struct.objectId);
                }
                if (struct.isSetFileMetadatas()) {
                    oprot.writeString(struct.fileMetadatas);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateFileMetadata_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(5);
                if (incoming.get(0)) {
                    struct.userName = iprot.readString();
                    struct.setUserNameIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.pwd = iprot.readString();
                    struct.setPwdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.bucketName = iprot.readString();
                    struct.setBucketNameIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.objectId = iprot.readString();
                    struct.setObjectIdIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.fileMetadatas = iprot.readString();
                    struct.setFileMetadatasIsSet(true);
                }
            }
        }

    }

    public static class updateFileMetadata_result implements org.apache.thrift.TBase<updateFileMetadata_result, updateFileMetadata_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateFileMetadata_result> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFileMetadata_result.class, metaDataMap);
        }
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFileMetadata_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new updateFileMetadata_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new updateFileMetadata_resultTupleSchemeFactory());
        }
        public String success; // required

        public updateFileMetadata_result() {
        }

        public updateFileMetadata_result(
                String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateFileMetadata_result(updateFileMetadata_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public updateFileMetadata_result deepCopy() {
            return new updateFileMetadata_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public updateFileMetadata_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof updateFileMetadata_result)
                return this.equals((updateFileMetadata_result) that);
            return false;
        }

        public boolean equals(updateFileMetadata_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(updateFileMetadata_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("updateFileMetadata_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class updateFileMetadata_resultStandardSchemeFactory implements SchemeFactory {
            public updateFileMetadata_resultStandardScheme getScheme() {
                return new updateFileMetadata_resultStandardScheme();
            }
        }

        private static class updateFileMetadata_resultStandardScheme extends StandardScheme<updateFileMetadata_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateFileMetadata_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateFileMetadata_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateFileMetadata_resultTupleSchemeFactory implements SchemeFactory {
            public updateFileMetadata_resultTupleScheme getScheme() {
                return new updateFileMetadata_resultTupleScheme();
            }
        }

        private static class updateFileMetadata_resultTupleScheme extends TupleScheme<updateFileMetadata_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateFileMetadata_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateFileMetadata_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class deleteFileMetadata_args implements org.apache.thrift.TBase<deleteFileMetadata_args, deleteFileMetadata_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFileMetadata_args> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PWD, new org.apache.thrift.meta_data.FieldMetaData("pwd", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.BUCKET_NAME, new org.apache.thrift.meta_data.FieldMetaData("bucketName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("objectId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFileMetadata_args.class, metaDataMap);
        }
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFileMetadata_args");
        private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("pwd", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField BUCKET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketName", org.apache.thrift.protocol.TType.STRING, (short) 3);
        private static final org.apache.thrift.protocol.TField OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("objectId", org.apache.thrift.protocol.TType.STRING, (short) 4);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new deleteFileMetadata_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new deleteFileMetadata_argsTupleSchemeFactory());
        }
        public String userName; // required
        public String pwd; // required
        public String bucketName; // required
        public String objectId; // required

        public deleteFileMetadata_args() {
        }

        public deleteFileMetadata_args(
                String userName,
                String pwd,
                String bucketName,
                String objectId) {
            this();
            this.userName = userName;
            this.pwd = pwd;
            this.bucketName = bucketName;
            this.objectId = objectId;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteFileMetadata_args(deleteFileMetadata_args other) {
            if (other.isSetUserName()) {
                this.userName = other.userName;
            }
            if (other.isSetPwd()) {
                this.pwd = other.pwd;
            }
            if (other.isSetBucketName()) {
                this.bucketName = other.bucketName;
            }
            if (other.isSetObjectId()) {
                this.objectId = other.objectId;
            }
        }

        public deleteFileMetadata_args deepCopy() {
            return new deleteFileMetadata_args(this);
        }

        @Override
        public void clear() {
            this.userName = null;
            this.pwd = null;
            this.bucketName = null;
            this.objectId = null;
        }

        public String getUserName() {
            return this.userName;
        }

        public deleteFileMetadata_args setUserName(String userName) {
            this.userName = userName;
            return this;
        }

        public void unsetUserName() {
            this.userName = null;
        }

        /**
         * Returns true if field userName is set (has been assigned a value) and false otherwise
         */
        public boolean isSetUserName() {
            return this.userName != null;
        }

        public void setUserNameIsSet(boolean value) {
            if (!value) {
                this.userName = null;
            }
        }

        public String getPwd() {
            return this.pwd;
        }

        public deleteFileMetadata_args setPwd(String pwd) {
            this.pwd = pwd;
            return this;
        }

        public void unsetPwd() {
            this.pwd = null;
        }

        /**
         * Returns true if field pwd is set (has been assigned a value) and false otherwise
         */
        public boolean isSetPwd() {
            return this.pwd != null;
        }

        public void setPwdIsSet(boolean value) {
            if (!value) {
                this.pwd = null;
            }
        }

        public String getBucketName() {
            return this.bucketName;
        }

        public deleteFileMetadata_args setBucketName(String bucketName) {
            this.bucketName = bucketName;
            return this;
        }

        public void unsetBucketName() {
            this.bucketName = null;
        }

        /**
         * Returns true if field bucketName is set (has been assigned a value) and false otherwise
         */
        public boolean isSetBucketName() {
            return this.bucketName != null;
        }

        public void setBucketNameIsSet(boolean value) {
            if (!value) {
                this.bucketName = null;
            }
        }

        public String getObjectId() {
            return this.objectId;
        }

        public deleteFileMetadata_args setObjectId(String objectId) {
            this.objectId = objectId;
            return this;
        }

        public void unsetObjectId() {
            this.objectId = null;
        }

        /**
         * Returns true if field objectId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetObjectId() {
            return this.objectId != null;
        }

        public void setObjectIdIsSet(boolean value) {
            if (!value) {
                this.objectId = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case USER_NAME:
                    if (value == null) {
                        unsetUserName();
                    } else {
                        setUserName((String) value);
                    }
                    break;

                case PWD:
                    if (value == null) {
                        unsetPwd();
                    } else {
                        setPwd((String) value);
                    }
                    break;

                case BUCKET_NAME:
                    if (value == null) {
                        unsetBucketName();
                    } else {
                        setBucketName((String) value);
                    }
                    break;

                case OBJECT_ID:
                    if (value == null) {
                        unsetObjectId();
                    } else {
                        setObjectId((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_NAME:
                    return getUserName();

                case PWD:
                    return getPwd();

                case BUCKET_NAME:
                    return getBucketName();

                case OBJECT_ID:
                    return getObjectId();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case USER_NAME:
                    return isSetUserName();
                case PWD:
                    return isSetPwd();
                case BUCKET_NAME:
                    return isSetBucketName();
                case OBJECT_ID:
                    return isSetObjectId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteFileMetadata_args)
                return this.equals((deleteFileMetadata_args) that);
            return false;
        }

        public boolean equals(deleteFileMetadata_args that) {
            if (that == null)
                return false;

            boolean this_present_userName = true && this.isSetUserName();
            boolean that_present_userName = true && that.isSetUserName();
            if (this_present_userName || that_present_userName) {
                if (!(this_present_userName && that_present_userName))
                    return false;
                if (!this.userName.equals(that.userName))
                    return false;
            }

            boolean this_present_pwd = true && this.isSetPwd();
            boolean that_present_pwd = true && that.isSetPwd();
            if (this_present_pwd || that_present_pwd) {
                if (!(this_present_pwd && that_present_pwd))
                    return false;
                if (!this.pwd.equals(that.pwd))
                    return false;
            }

            boolean this_present_bucketName = true && this.isSetBucketName();
            boolean that_present_bucketName = true && that.isSetBucketName();
            if (this_present_bucketName || that_present_bucketName) {
                if (!(this_present_bucketName && that_present_bucketName))
                    return false;
                if (!this.bucketName.equals(that.bucketName))
                    return false;
            }

            boolean this_present_objectId = true && this.isSetObjectId();
            boolean that_present_objectId = true && that.isSetObjectId();
            if (this_present_objectId || that_present_objectId) {
                if (!(this_present_objectId && that_present_objectId))
                    return false;
                if (!this.objectId.equals(that.objectId))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(deleteFileMetadata_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPwd()).compareTo(other.isSetPwd());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPwd()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwd, other.pwd);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetBucketName()).compareTo(other.isSetBucketName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBucketName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketName, other.bucketName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetObjectId()).compareTo(other.isSetObjectId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetObjectId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectId, other.objectId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("deleteFileMetadata_args(");
            boolean first = true;

            sb.append("userName:");
            if (this.userName == null) {
                sb.append("null");
            } else {
                sb.append(this.userName);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("pwd:");
            if (this.pwd == null) {
                sb.append("null");
            } else {
                sb.append(this.pwd);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("bucketName:");
            if (this.bucketName == null) {
                sb.append("null");
            } else {
                sb.append(this.bucketName);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("objectId:");
            if (this.objectId == null) {
                sb.append("null");
            } else {
                sb.append(this.objectId);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_NAME((short) 1, "userName"),
            PWD((short) 2, "pwd"),
            BUCKET_NAME((short) 3, "bucketName"),
            OBJECT_ID((short) 4, "objectId");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USER_NAME
                        return USER_NAME;
                    case 2: // PWD
                        return PWD;
                    case 3: // BUCKET_NAME
                        return BUCKET_NAME;
                    case 4: // OBJECT_ID
                        return OBJECT_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class deleteFileMetadata_argsStandardSchemeFactory implements SchemeFactory {
            public deleteFileMetadata_argsStandardScheme getScheme() {
                return new deleteFileMetadata_argsStandardScheme();
            }
        }

        private static class deleteFileMetadata_argsStandardScheme extends StandardScheme<deleteFileMetadata_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFileMetadata_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.userName = iprot.readString();
                                struct.setUserNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PWD
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.pwd = iprot.readString();
                                struct.setPwdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // BUCKET_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.bucketName = iprot.readString();
                                struct.setBucketNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // OBJECT_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.objectId = iprot.readString();
                                struct.setObjectIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFileMetadata_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.userName != null) {
                    oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
                    oprot.writeString(struct.userName);
                    oprot.writeFieldEnd();
                }
                if (struct.pwd != null) {
                    oprot.writeFieldBegin(PWD_FIELD_DESC);
                    oprot.writeString(struct.pwd);
                    oprot.writeFieldEnd();
                }
                if (struct.bucketName != null) {
                    oprot.writeFieldBegin(BUCKET_NAME_FIELD_DESC);
                    oprot.writeString(struct.bucketName);
                    oprot.writeFieldEnd();
                }
                if (struct.objectId != null) {
                    oprot.writeFieldBegin(OBJECT_ID_FIELD_DESC);
                    oprot.writeString(struct.objectId);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteFileMetadata_argsTupleSchemeFactory implements SchemeFactory {
            public deleteFileMetadata_argsTupleScheme getScheme() {
                return new deleteFileMetadata_argsTupleScheme();
            }
        }

        private static class deleteFileMetadata_argsTupleScheme extends TupleScheme<deleteFileMetadata_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteFileMetadata_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUserName()) {
                    optionals.set(0);
                }
                if (struct.isSetPwd()) {
                    optionals.set(1);
                }
                if (struct.isSetBucketName()) {
                    optionals.set(2);
                }
                if (struct.isSetObjectId()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetUserName()) {
                    oprot.writeString(struct.userName);
                }
                if (struct.isSetPwd()) {
                    oprot.writeString(struct.pwd);
                }
                if (struct.isSetBucketName()) {
                    oprot.writeString(struct.bucketName);
                }
                if (struct.isSetObjectId()) {
                    oprot.writeString(struct.objectId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteFileMetadata_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.userName = iprot.readString();
                    struct.setUserNameIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.pwd = iprot.readString();
                    struct.setPwdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.bucketName = iprot.readString();
                    struct.setBucketNameIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.objectId = iprot.readString();
                    struct.setObjectIdIsSet(true);
                }
            }
        }

    }

    public static class deleteFileMetadata_result implements org.apache.thrift.TBase<deleteFileMetadata_result, deleteFileMetadata_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFileMetadata_result> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFileMetadata_result.class, metaDataMap);
        }
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFileMetadata_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new deleteFileMetadata_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new deleteFileMetadata_resultTupleSchemeFactory());
        }
        public String success; // required

        public deleteFileMetadata_result() {
        }

        public deleteFileMetadata_result(
                String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteFileMetadata_result(deleteFileMetadata_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public deleteFileMetadata_result deepCopy() {
            return new deleteFileMetadata_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public deleteFileMetadata_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteFileMetadata_result)
                return this.equals((deleteFileMetadata_result) that);
            return false;
        }

        public boolean equals(deleteFileMetadata_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(deleteFileMetadata_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("deleteFileMetadata_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class deleteFileMetadata_resultStandardSchemeFactory implements SchemeFactory {
            public deleteFileMetadata_resultStandardScheme getScheme() {
                return new deleteFileMetadata_resultStandardScheme();
            }
        }

        private static class deleteFileMetadata_resultStandardScheme extends StandardScheme<deleteFileMetadata_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFileMetadata_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFileMetadata_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteFileMetadata_resultTupleSchemeFactory implements SchemeFactory {
            public deleteFileMetadata_resultTupleScheme getScheme() {
                return new deleteFileMetadata_resultTupleScheme();
            }
        }

        private static class deleteFileMetadata_resultTupleScheme extends TupleScheme<deleteFileMetadata_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteFileMetadata_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteFileMetadata_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getFileMetadata_args implements org.apache.thrift.TBase<getFileMetadata_args, getFileMetadata_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFileMetadata_args> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PWD, new org.apache.thrift.meta_data.FieldMetaData("pwd", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.BUCKET_NAME, new org.apache.thrift.meta_data.FieldMetaData("bucketName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("objectId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileMetadata_args.class, metaDataMap);
        }
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFileMetadata_args");
        private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("pwd", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField BUCKET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketName", org.apache.thrift.protocol.TType.STRING, (short) 3);
        private static final org.apache.thrift.protocol.TField OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("objectId", org.apache.thrift.protocol.TType.STRING, (short) 4);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new getFileMetadata_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getFileMetadata_argsTupleSchemeFactory());
        }
        public String userName; // required
        public String pwd; // required
        public String bucketName; // required
        public String objectId; // required

        public getFileMetadata_args() {
        }

        public getFileMetadata_args(
                String userName,
                String pwd,
                String bucketName,
                String objectId) {
            this();
            this.userName = userName;
            this.pwd = pwd;
            this.bucketName = bucketName;
            this.objectId = objectId;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getFileMetadata_args(getFileMetadata_args other) {
            if (other.isSetUserName()) {
                this.userName = other.userName;
            }
            if (other.isSetPwd()) {
                this.pwd = other.pwd;
            }
            if (other.isSetBucketName()) {
                this.bucketName = other.bucketName;
            }
            if (other.isSetObjectId()) {
                this.objectId = other.objectId;
            }
        }

        public getFileMetadata_args deepCopy() {
            return new getFileMetadata_args(this);
        }

        @Override
        public void clear() {
            this.userName = null;
            this.pwd = null;
            this.bucketName = null;
            this.objectId = null;
        }

        public String getUserName() {
            return this.userName;
        }

        public getFileMetadata_args setUserName(String userName) {
            this.userName = userName;
            return this;
        }

        public void unsetUserName() {
            this.userName = null;
        }

        /**
         * Returns true if field userName is set (has been assigned a value) and false otherwise
         */
        public boolean isSetUserName() {
            return this.userName != null;
        }

        public void setUserNameIsSet(boolean value) {
            if (!value) {
                this.userName = null;
            }
        }

        public String getPwd() {
            return this.pwd;
        }

        public getFileMetadata_args setPwd(String pwd) {
            this.pwd = pwd;
            return this;
        }

        public void unsetPwd() {
            this.pwd = null;
        }

        /**
         * Returns true if field pwd is set (has been assigned a value) and false otherwise
         */
        public boolean isSetPwd() {
            return this.pwd != null;
        }

        public void setPwdIsSet(boolean value) {
            if (!value) {
                this.pwd = null;
            }
        }

        public String getBucketName() {
            return this.bucketName;
        }

        public getFileMetadata_args setBucketName(String bucketName) {
            this.bucketName = bucketName;
            return this;
        }

        public void unsetBucketName() {
            this.bucketName = null;
        }

        /**
         * Returns true if field bucketName is set (has been assigned a value) and false otherwise
         */
        public boolean isSetBucketName() {
            return this.bucketName != null;
        }

        public void setBucketNameIsSet(boolean value) {
            if (!value) {
                this.bucketName = null;
            }
        }

        public String getObjectId() {
            return this.objectId;
        }

        public getFileMetadata_args setObjectId(String objectId) {
            this.objectId = objectId;
            return this;
        }

        public void unsetObjectId() {
            this.objectId = null;
        }

        /**
         * Returns true if field objectId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetObjectId() {
            return this.objectId != null;
        }

        public void setObjectIdIsSet(boolean value) {
            if (!value) {
                this.objectId = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case USER_NAME:
                    if (value == null) {
                        unsetUserName();
                    } else {
                        setUserName((String) value);
                    }
                    break;

                case PWD:
                    if (value == null) {
                        unsetPwd();
                    } else {
                        setPwd((String) value);
                    }
                    break;

                case BUCKET_NAME:
                    if (value == null) {
                        unsetBucketName();
                    } else {
                        setBucketName((String) value);
                    }
                    break;

                case OBJECT_ID:
                    if (value == null) {
                        unsetObjectId();
                    } else {
                        setObjectId((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_NAME:
                    return getUserName();

                case PWD:
                    return getPwd();

                case BUCKET_NAME:
                    return getBucketName();

                case OBJECT_ID:
                    return getObjectId();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case USER_NAME:
                    return isSetUserName();
                case PWD:
                    return isSetPwd();
                case BUCKET_NAME:
                    return isSetBucketName();
                case OBJECT_ID:
                    return isSetObjectId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getFileMetadata_args)
                return this.equals((getFileMetadata_args) that);
            return false;
        }

        public boolean equals(getFileMetadata_args that) {
            if (that == null)
                return false;

            boolean this_present_userName = true && this.isSetUserName();
            boolean that_present_userName = true && that.isSetUserName();
            if (this_present_userName || that_present_userName) {
                if (!(this_present_userName && that_present_userName))
                    return false;
                if (!this.userName.equals(that.userName))
                    return false;
            }

            boolean this_present_pwd = true && this.isSetPwd();
            boolean that_present_pwd = true && that.isSetPwd();
            if (this_present_pwd || that_present_pwd) {
                if (!(this_present_pwd && that_present_pwd))
                    return false;
                if (!this.pwd.equals(that.pwd))
                    return false;
            }

            boolean this_present_bucketName = true && this.isSetBucketName();
            boolean that_present_bucketName = true && that.isSetBucketName();
            if (this_present_bucketName || that_present_bucketName) {
                if (!(this_present_bucketName && that_present_bucketName))
                    return false;
                if (!this.bucketName.equals(that.bucketName))
                    return false;
            }

            boolean this_present_objectId = true && this.isSetObjectId();
            boolean that_present_objectId = true && that.isSetObjectId();
            if (this_present_objectId || that_present_objectId) {
                if (!(this_present_objectId && that_present_objectId))
                    return false;
                if (!this.objectId.equals(that.objectId))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(getFileMetadata_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPwd()).compareTo(other.isSetPwd());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPwd()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwd, other.pwd);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetBucketName()).compareTo(other.isSetBucketName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBucketName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketName, other.bucketName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetObjectId()).compareTo(other.isSetObjectId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetObjectId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectId, other.objectId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getFileMetadata_args(");
            boolean first = true;

            sb.append("userName:");
            if (this.userName == null) {
                sb.append("null");
            } else {
                sb.append(this.userName);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("pwd:");
            if (this.pwd == null) {
                sb.append("null");
            } else {
                sb.append(this.pwd);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("bucketName:");
            if (this.bucketName == null) {
                sb.append("null");
            } else {
                sb.append(this.bucketName);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("objectId:");
            if (this.objectId == null) {
                sb.append("null");
            } else {
                sb.append(this.objectId);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_NAME((short) 1, "userName"),
            PWD((short) 2, "pwd"),
            BUCKET_NAME((short) 3, "bucketName"),
            OBJECT_ID((short) 4, "objectId");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USER_NAME
                        return USER_NAME;
                    case 2: // PWD
                        return PWD;
                    case 3: // BUCKET_NAME
                        return BUCKET_NAME;
                    case 4: // OBJECT_ID
                        return OBJECT_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class getFileMetadata_argsStandardSchemeFactory implements SchemeFactory {
            public getFileMetadata_argsStandardScheme getScheme() {
                return new getFileMetadata_argsStandardScheme();
            }
        }

        private static class getFileMetadata_argsStandardScheme extends StandardScheme<getFileMetadata_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getFileMetadata_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.userName = iprot.readString();
                                struct.setUserNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PWD
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.pwd = iprot.readString();
                                struct.setPwdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // BUCKET_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.bucketName = iprot.readString();
                                struct.setBucketNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // OBJECT_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.objectId = iprot.readString();
                                struct.setObjectIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getFileMetadata_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.userName != null) {
                    oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
                    oprot.writeString(struct.userName);
                    oprot.writeFieldEnd();
                }
                if (struct.pwd != null) {
                    oprot.writeFieldBegin(PWD_FIELD_DESC);
                    oprot.writeString(struct.pwd);
                    oprot.writeFieldEnd();
                }
                if (struct.bucketName != null) {
                    oprot.writeFieldBegin(BUCKET_NAME_FIELD_DESC);
                    oprot.writeString(struct.bucketName);
                    oprot.writeFieldEnd();
                }
                if (struct.objectId != null) {
                    oprot.writeFieldBegin(OBJECT_ID_FIELD_DESC);
                    oprot.writeString(struct.objectId);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getFileMetadata_argsTupleSchemeFactory implements SchemeFactory {
            public getFileMetadata_argsTupleScheme getScheme() {
                return new getFileMetadata_argsTupleScheme();
            }
        }

        private static class getFileMetadata_argsTupleScheme extends TupleScheme<getFileMetadata_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getFileMetadata_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUserName()) {
                    optionals.set(0);
                }
                if (struct.isSetPwd()) {
                    optionals.set(1);
                }
                if (struct.isSetBucketName()) {
                    optionals.set(2);
                }
                if (struct.isSetObjectId()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetUserName()) {
                    oprot.writeString(struct.userName);
                }
                if (struct.isSetPwd()) {
                    oprot.writeString(struct.pwd);
                }
                if (struct.isSetBucketName()) {
                    oprot.writeString(struct.bucketName);
                }
                if (struct.isSetObjectId()) {
                    oprot.writeString(struct.objectId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getFileMetadata_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.userName = iprot.readString();
                    struct.setUserNameIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.pwd = iprot.readString();
                    struct.setPwdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.bucketName = iprot.readString();
                    struct.setBucketNameIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.objectId = iprot.readString();
                    struct.setObjectIdIsSet(true);
                }
            }
        }

    }

    public static class getFileMetadata_result implements org.apache.thrift.TBase<getFileMetadata_result, getFileMetadata_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFileMetadata_result> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileMetadata_result.class, metaDataMap);
        }
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFileMetadata_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new getFileMetadata_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getFileMetadata_resultTupleSchemeFactory());
        }
        public String success; // required

        public getFileMetadata_result() {
        }

        public getFileMetadata_result(
                String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getFileMetadata_result(getFileMetadata_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public getFileMetadata_result deepCopy() {
            return new getFileMetadata_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public getFileMetadata_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getFileMetadata_result)
                return this.equals((getFileMetadata_result) that);
            return false;
        }

        public boolean equals(getFileMetadata_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(getFileMetadata_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getFileMetadata_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class getFileMetadata_resultStandardSchemeFactory implements SchemeFactory {
            public getFileMetadata_resultStandardScheme getScheme() {
                return new getFileMetadata_resultStandardScheme();
            }
        }

        private static class getFileMetadata_resultStandardScheme extends StandardScheme<getFileMetadata_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getFileMetadata_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getFileMetadata_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getFileMetadata_resultTupleSchemeFactory implements SchemeFactory {
            public getFileMetadata_resultTupleScheme getScheme() {
                return new getFileMetadata_resultTupleScheme();
            }
        }

        private static class getFileMetadata_resultTupleScheme extends TupleScheme<getFileMetadata_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getFileMetadata_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getFileMetadata_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getFileMetadatas_args implements org.apache.thrift.TBase<getFileMetadatas_args, getFileMetadatas_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFileMetadatas_args> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PWD, new org.apache.thrift.meta_data.FieldMetaData("pwd", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.BUCKET_NAME, new org.apache.thrift.meta_data.FieldMetaData("bucketName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.FS_CRITERIA, new org.apache.thrift.meta_data.FieldMetaData("fsCriteria", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileMetadatas_args.class, metaDataMap);
        }
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFileMetadatas_args");
        private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("pwd", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField BUCKET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketName", org.apache.thrift.protocol.TType.STRING, (short) 3);
        private static final org.apache.thrift.protocol.TField FS_CRITERIA_FIELD_DESC = new org.apache.thrift.protocol.TField("fsCriteria", org.apache.thrift.protocol.TType.STRING, (short) 4);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new getFileMetadatas_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getFileMetadatas_argsTupleSchemeFactory());
        }
        public String userName; // required
        public String pwd; // required
        public String bucketName; // required
        public String fsCriteria; // required

        public getFileMetadatas_args() {
        }

        public getFileMetadatas_args(
                String userName,
                String pwd,
                String bucketName,
                String fsCriteria) {
            this();
            this.userName = userName;
            this.pwd = pwd;
            this.bucketName = bucketName;
            this.fsCriteria = fsCriteria;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getFileMetadatas_args(getFileMetadatas_args other) {
            if (other.isSetUserName()) {
                this.userName = other.userName;
            }
            if (other.isSetPwd()) {
                this.pwd = other.pwd;
            }
            if (other.isSetBucketName()) {
                this.bucketName = other.bucketName;
            }
            if (other.isSetFsCriteria()) {
                this.fsCriteria = other.fsCriteria;
            }
        }

        public getFileMetadatas_args deepCopy() {
            return new getFileMetadatas_args(this);
        }

        @Override
        public void clear() {
            this.userName = null;
            this.pwd = null;
            this.bucketName = null;
            this.fsCriteria = null;
        }

        public String getUserName() {
            return this.userName;
        }

        public getFileMetadatas_args setUserName(String userName) {
            this.userName = userName;
            return this;
        }

        public void unsetUserName() {
            this.userName = null;
        }

        /**
         * Returns true if field userName is set (has been assigned a value) and false otherwise
         */
        public boolean isSetUserName() {
            return this.userName != null;
        }

        public void setUserNameIsSet(boolean value) {
            if (!value) {
                this.userName = null;
            }
        }

        public String getPwd() {
            return this.pwd;
        }

        public getFileMetadatas_args setPwd(String pwd) {
            this.pwd = pwd;
            return this;
        }

        public void unsetPwd() {
            this.pwd = null;
        }

        /**
         * Returns true if field pwd is set (has been assigned a value) and false otherwise
         */
        public boolean isSetPwd() {
            return this.pwd != null;
        }

        public void setPwdIsSet(boolean value) {
            if (!value) {
                this.pwd = null;
            }
        }

        public String getBucketName() {
            return this.bucketName;
        }

        public getFileMetadatas_args setBucketName(String bucketName) {
            this.bucketName = bucketName;
            return this;
        }

        public void unsetBucketName() {
            this.bucketName = null;
        }

        /**
         * Returns true if field bucketName is set (has been assigned a value) and false otherwise
         */
        public boolean isSetBucketName() {
            return this.bucketName != null;
        }

        public void setBucketNameIsSet(boolean value) {
            if (!value) {
                this.bucketName = null;
            }
        }

        public String getFsCriteria() {
            return this.fsCriteria;
        }

        public getFileMetadatas_args setFsCriteria(String fsCriteria) {
            this.fsCriteria = fsCriteria;
            return this;
        }

        public void unsetFsCriteria() {
            this.fsCriteria = null;
        }

        /**
         * Returns true if field fsCriteria is set (has been assigned a value) and false otherwise
         */
        public boolean isSetFsCriteria() {
            return this.fsCriteria != null;
        }

        public void setFsCriteriaIsSet(boolean value) {
            if (!value) {
                this.fsCriteria = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case USER_NAME:
                    if (value == null) {
                        unsetUserName();
                    } else {
                        setUserName((String) value);
                    }
                    break;

                case PWD:
                    if (value == null) {
                        unsetPwd();
                    } else {
                        setPwd((String) value);
                    }
                    break;

                case BUCKET_NAME:
                    if (value == null) {
                        unsetBucketName();
                    } else {
                        setBucketName((String) value);
                    }
                    break;

                case FS_CRITERIA:
                    if (value == null) {
                        unsetFsCriteria();
                    } else {
                        setFsCriteria((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_NAME:
                    return getUserName();

                case PWD:
                    return getPwd();

                case BUCKET_NAME:
                    return getBucketName();

                case FS_CRITERIA:
                    return getFsCriteria();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case USER_NAME:
                    return isSetUserName();
                case PWD:
                    return isSetPwd();
                case BUCKET_NAME:
                    return isSetBucketName();
                case FS_CRITERIA:
                    return isSetFsCriteria();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getFileMetadatas_args)
                return this.equals((getFileMetadatas_args) that);
            return false;
        }

        public boolean equals(getFileMetadatas_args that) {
            if (that == null)
                return false;

            boolean this_present_userName = true && this.isSetUserName();
            boolean that_present_userName = true && that.isSetUserName();
            if (this_present_userName || that_present_userName) {
                if (!(this_present_userName && that_present_userName))
                    return false;
                if (!this.userName.equals(that.userName))
                    return false;
            }

            boolean this_present_pwd = true && this.isSetPwd();
            boolean that_present_pwd = true && that.isSetPwd();
            if (this_present_pwd || that_present_pwd) {
                if (!(this_present_pwd && that_present_pwd))
                    return false;
                if (!this.pwd.equals(that.pwd))
                    return false;
            }

            boolean this_present_bucketName = true && this.isSetBucketName();
            boolean that_present_bucketName = true && that.isSetBucketName();
            if (this_present_bucketName || that_present_bucketName) {
                if (!(this_present_bucketName && that_present_bucketName))
                    return false;
                if (!this.bucketName.equals(that.bucketName))
                    return false;
            }

            boolean this_present_fsCriteria = true && this.isSetFsCriteria();
            boolean that_present_fsCriteria = true && that.isSetFsCriteria();
            if (this_present_fsCriteria || that_present_fsCriteria) {
                if (!(this_present_fsCriteria && that_present_fsCriteria))
                    return false;
                if (!this.fsCriteria.equals(that.fsCriteria))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(getFileMetadatas_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPwd()).compareTo(other.isSetPwd());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPwd()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwd, other.pwd);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetBucketName()).compareTo(other.isSetBucketName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBucketName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketName, other.bucketName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetFsCriteria()).compareTo(other.isSetFsCriteria());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFsCriteria()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fsCriteria, other.fsCriteria);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getFileMetadatas_args(");
            boolean first = true;

            sb.append("userName:");
            if (this.userName == null) {
                sb.append("null");
            } else {
                sb.append(this.userName);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("pwd:");
            if (this.pwd == null) {
                sb.append("null");
            } else {
                sb.append(this.pwd);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("bucketName:");
            if (this.bucketName == null) {
                sb.append("null");
            } else {
                sb.append(this.bucketName);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("fsCriteria:");
            if (this.fsCriteria == null) {
                sb.append("null");
            } else {
                sb.append(this.fsCriteria);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_NAME((short) 1, "userName"),
            PWD((short) 2, "pwd"),
            BUCKET_NAME((short) 3, "bucketName"),
            FS_CRITERIA((short) 4, "fsCriteria");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USER_NAME
                        return USER_NAME;
                    case 2: // PWD
                        return PWD;
                    case 3: // BUCKET_NAME
                        return BUCKET_NAME;
                    case 4: // FS_CRITERIA
                        return FS_CRITERIA;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class getFileMetadatas_argsStandardSchemeFactory implements SchemeFactory {
            public getFileMetadatas_argsStandardScheme getScheme() {
                return new getFileMetadatas_argsStandardScheme();
            }
        }

        private static class getFileMetadatas_argsStandardScheme extends StandardScheme<getFileMetadatas_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getFileMetadatas_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.userName = iprot.readString();
                                struct.setUserNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PWD
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.pwd = iprot.readString();
                                struct.setPwdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // BUCKET_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.bucketName = iprot.readString();
                                struct.setBucketNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // FS_CRITERIA
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.fsCriteria = iprot.readString();
                                struct.setFsCriteriaIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getFileMetadatas_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.userName != null) {
                    oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
                    oprot.writeString(struct.userName);
                    oprot.writeFieldEnd();
                }
                if (struct.pwd != null) {
                    oprot.writeFieldBegin(PWD_FIELD_DESC);
                    oprot.writeString(struct.pwd);
                    oprot.writeFieldEnd();
                }
                if (struct.bucketName != null) {
                    oprot.writeFieldBegin(BUCKET_NAME_FIELD_DESC);
                    oprot.writeString(struct.bucketName);
                    oprot.writeFieldEnd();
                }
                if (struct.fsCriteria != null) {
                    oprot.writeFieldBegin(FS_CRITERIA_FIELD_DESC);
                    oprot.writeString(struct.fsCriteria);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getFileMetadatas_argsTupleSchemeFactory implements SchemeFactory {
            public getFileMetadatas_argsTupleScheme getScheme() {
                return new getFileMetadatas_argsTupleScheme();
            }
        }

        private static class getFileMetadatas_argsTupleScheme extends TupleScheme<getFileMetadatas_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getFileMetadatas_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUserName()) {
                    optionals.set(0);
                }
                if (struct.isSetPwd()) {
                    optionals.set(1);
                }
                if (struct.isSetBucketName()) {
                    optionals.set(2);
                }
                if (struct.isSetFsCriteria()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetUserName()) {
                    oprot.writeString(struct.userName);
                }
                if (struct.isSetPwd()) {
                    oprot.writeString(struct.pwd);
                }
                if (struct.isSetBucketName()) {
                    oprot.writeString(struct.bucketName);
                }
                if (struct.isSetFsCriteria()) {
                    oprot.writeString(struct.fsCriteria);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getFileMetadatas_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.userName = iprot.readString();
                    struct.setUserNameIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.pwd = iprot.readString();
                    struct.setPwdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.bucketName = iprot.readString();
                    struct.setBucketNameIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.fsCriteria = iprot.readString();
                    struct.setFsCriteriaIsSet(true);
                }
            }
        }

    }

    public static class getFileMetadatas_result implements org.apache.thrift.TBase<getFileMetadatas_result, getFileMetadatas_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFileMetadatas_result> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileMetadatas_result.class, metaDataMap);
        }
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFileMetadatas_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new getFileMetadatas_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getFileMetadatas_resultTupleSchemeFactory());
        }
        public String success; // required

        public getFileMetadatas_result() {
        }

        public getFileMetadatas_result(
                String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getFileMetadatas_result(getFileMetadatas_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public getFileMetadatas_result deepCopy() {
            return new getFileMetadatas_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public getFileMetadatas_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getFileMetadatas_result)
                return this.equals((getFileMetadatas_result) that);
            return false;
        }

        public boolean equals(getFileMetadatas_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(getFileMetadatas_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getFileMetadatas_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class getFileMetadatas_resultStandardSchemeFactory implements SchemeFactory {
            public getFileMetadatas_resultStandardScheme getScheme() {
                return new getFileMetadatas_resultStandardScheme();
            }
        }

        private static class getFileMetadatas_resultStandardScheme extends StandardScheme<getFileMetadatas_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getFileMetadatas_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getFileMetadatas_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getFileMetadatas_resultTupleSchemeFactory implements SchemeFactory {
            public getFileMetadatas_resultTupleScheme getScheme() {
                return new getFileMetadatas_resultTupleScheme();
            }
        }

        private static class getFileMetadatas_resultTupleScheme extends TupleScheme<getFileMetadatas_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getFileMetadatas_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getFileMetadatas_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class addUser_args implements org.apache.thrift.TBase<addUser_args, addUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<addUser_args> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PWD, new org.apache.thrift.meta_data.FieldMetaData("pwd", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.BUCKETS, new org.apache.thrift.meta_data.FieldMetaData("buckets", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addUser_args.class, metaDataMap);
        }
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addUser_args");
        private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("pwd", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField BUCKETS_FIELD_DESC = new org.apache.thrift.protocol.TField("buckets", org.apache.thrift.protocol.TType.STRING, (short) 3);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new addUser_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new addUser_argsTupleSchemeFactory());
        }
        public String userName; // required
        public String pwd; // required
        public String buckets; // required

        public addUser_args() {
        }

        public addUser_args(
                String userName,
                String pwd,
                String buckets) {
            this();
            this.userName = userName;
            this.pwd = pwd;
            this.buckets = buckets;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addUser_args(addUser_args other) {
            if (other.isSetUserName()) {
                this.userName = other.userName;
            }
            if (other.isSetPwd()) {
                this.pwd = other.pwd;
            }
            if (other.isSetBuckets()) {
                this.buckets = other.buckets;
            }
        }

        public addUser_args deepCopy() {
            return new addUser_args(this);
        }

        @Override
        public void clear() {
            this.userName = null;
            this.pwd = null;
            this.buckets = null;
        }

        public String getUserName() {
            return this.userName;
        }

        public addUser_args setUserName(String userName) {
            this.userName = userName;
            return this;
        }

        public void unsetUserName() {
            this.userName = null;
        }

        /**
         * Returns true if field userName is set (has been assigned a value) and false otherwise
         */
        public boolean isSetUserName() {
            return this.userName != null;
        }

        public void setUserNameIsSet(boolean value) {
            if (!value) {
                this.userName = null;
            }
        }

        public String getPwd() {
            return this.pwd;
        }

        public addUser_args setPwd(String pwd) {
            this.pwd = pwd;
            return this;
        }

        public void unsetPwd() {
            this.pwd = null;
        }

        /**
         * Returns true if field pwd is set (has been assigned a value) and false otherwise
         */
        public boolean isSetPwd() {
            return this.pwd != null;
        }

        public void setPwdIsSet(boolean value) {
            if (!value) {
                this.pwd = null;
            }
        }

        public String getBuckets() {
            return this.buckets;
        }

        public addUser_args setBuckets(String buckets) {
            this.buckets = buckets;
            return this;
        }

        public void unsetBuckets() {
            this.buckets = null;
        }

        /**
         * Returns true if field buckets is set (has been assigned a value) and false otherwise
         */
        public boolean isSetBuckets() {
            return this.buckets != null;
        }

        public void setBucketsIsSet(boolean value) {
            if (!value) {
                this.buckets = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case USER_NAME:
                    if (value == null) {
                        unsetUserName();
                    } else {
                        setUserName((String) value);
                    }
                    break;

                case PWD:
                    if (value == null) {
                        unsetPwd();
                    } else {
                        setPwd((String) value);
                    }
                    break;

                case BUCKETS:
                    if (value == null) {
                        unsetBuckets();
                    } else {
                        setBuckets((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_NAME:
                    return getUserName();

                case PWD:
                    return getPwd();

                case BUCKETS:
                    return getBuckets();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case USER_NAME:
                    return isSetUserName();
                case PWD:
                    return isSetPwd();
                case BUCKETS:
                    return isSetBuckets();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addUser_args)
                return this.equals((addUser_args) that);
            return false;
        }

        public boolean equals(addUser_args that) {
            if (that == null)
                return false;

            boolean this_present_userName = true && this.isSetUserName();
            boolean that_present_userName = true && that.isSetUserName();
            if (this_present_userName || that_present_userName) {
                if (!(this_present_userName && that_present_userName))
                    return false;
                if (!this.userName.equals(that.userName))
                    return false;
            }

            boolean this_present_pwd = true && this.isSetPwd();
            boolean that_present_pwd = true && that.isSetPwd();
            if (this_present_pwd || that_present_pwd) {
                if (!(this_present_pwd && that_present_pwd))
                    return false;
                if (!this.pwd.equals(that.pwd))
                    return false;
            }

            boolean this_present_buckets = true && this.isSetBuckets();
            boolean that_present_buckets = true && that.isSetBuckets();
            if (this_present_buckets || that_present_buckets) {
                if (!(this_present_buckets && that_present_buckets))
                    return false;
                if (!this.buckets.equals(that.buckets))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(addUser_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPwd()).compareTo(other.isSetPwd());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPwd()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwd, other.pwd);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetBuckets()).compareTo(other.isSetBuckets());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBuckets()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buckets, other.buckets);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addUser_args(");
            boolean first = true;

            sb.append("userName:");
            if (this.userName == null) {
                sb.append("null");
            } else {
                sb.append(this.userName);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("pwd:");
            if (this.pwd == null) {
                sb.append("null");
            } else {
                sb.append(this.pwd);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("buckets:");
            if (this.buckets == null) {
                sb.append("null");
            } else {
                sb.append(this.buckets);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_NAME((short) 1, "userName"),
            PWD((short) 2, "pwd"),
            BUCKETS((short) 3, "buckets");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USER_NAME
                        return USER_NAME;
                    case 2: // PWD
                        return PWD;
                    case 3: // BUCKETS
                        return BUCKETS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class addUser_argsStandardSchemeFactory implements SchemeFactory {
            public addUser_argsStandardScheme getScheme() {
                return new addUser_argsStandardScheme();
            }
        }

        private static class addUser_argsStandardScheme extends StandardScheme<addUser_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addUser_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.userName = iprot.readString();
                                struct.setUserNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PWD
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.pwd = iprot.readString();
                                struct.setPwdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // BUCKETS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.buckets = iprot.readString();
                                struct.setBucketsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addUser_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.userName != null) {
                    oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
                    oprot.writeString(struct.userName);
                    oprot.writeFieldEnd();
                }
                if (struct.pwd != null) {
                    oprot.writeFieldBegin(PWD_FIELD_DESC);
                    oprot.writeString(struct.pwd);
                    oprot.writeFieldEnd();
                }
                if (struct.buckets != null) {
                    oprot.writeFieldBegin(BUCKETS_FIELD_DESC);
                    oprot.writeString(struct.buckets);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addUser_argsTupleSchemeFactory implements SchemeFactory {
            public addUser_argsTupleScheme getScheme() {
                return new addUser_argsTupleScheme();
            }
        }

        private static class addUser_argsTupleScheme extends TupleScheme<addUser_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addUser_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUserName()) {
                    optionals.set(0);
                }
                if (struct.isSetPwd()) {
                    optionals.set(1);
                }
                if (struct.isSetBuckets()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetUserName()) {
                    oprot.writeString(struct.userName);
                }
                if (struct.isSetPwd()) {
                    oprot.writeString(struct.pwd);
                }
                if (struct.isSetBuckets()) {
                    oprot.writeString(struct.buckets);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addUser_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.userName = iprot.readString();
                    struct.setUserNameIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.pwd = iprot.readString();
                    struct.setPwdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.buckets = iprot.readString();
                    struct.setBucketsIsSet(true);
                }
            }
        }

    }

    public static class addUser_result implements org.apache.thrift.TBase<addUser_result, addUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<addUser_result> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addUser_result.class, metaDataMap);
        }
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addUser_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new addUser_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new addUser_resultTupleSchemeFactory());
        }
        public String success; // required

        public addUser_result() {
        }

        public addUser_result(
                String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addUser_result(addUser_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public addUser_result deepCopy() {
            return new addUser_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public addUser_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addUser_result)
                return this.equals((addUser_result) that);
            return false;
        }

        public boolean equals(addUser_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(addUser_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addUser_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class addUser_resultStandardSchemeFactory implements SchemeFactory {
            public addUser_resultStandardScheme getScheme() {
                return new addUser_resultStandardScheme();
            }
        }

        private static class addUser_resultStandardScheme extends StandardScheme<addUser_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addUser_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addUser_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addUser_resultTupleSchemeFactory implements SchemeFactory {
            public addUser_resultTupleScheme getScheme() {
                return new addUser_resultTupleScheme();
            }
        }

        private static class addUser_resultTupleScheme extends TupleScheme<addUser_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addUser_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addUser_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class updateUser_args implements org.apache.thrift.TBase<updateUser_args, updateUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateUser_args> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PWD, new org.apache.thrift.meta_data.FieldMetaData("pwd", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.BUCKETS, new org.apache.thrift.meta_data.FieldMetaData("buckets", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUser_args.class, metaDataMap);
        }
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUser_args");
        private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("pwd", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField BUCKETS_FIELD_DESC = new org.apache.thrift.protocol.TField("buckets", org.apache.thrift.protocol.TType.STRING, (short) 3);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new updateUser_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new updateUser_argsTupleSchemeFactory());
        }
        public String userName; // required
        public String pwd; // required
        public String buckets; // required

        public updateUser_args() {
        }

        public updateUser_args(
                String userName,
                String pwd,
                String buckets) {
            this();
            this.userName = userName;
            this.pwd = pwd;
            this.buckets = buckets;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateUser_args(updateUser_args other) {
            if (other.isSetUserName()) {
                this.userName = other.userName;
            }
            if (other.isSetPwd()) {
                this.pwd = other.pwd;
            }
            if (other.isSetBuckets()) {
                this.buckets = other.buckets;
            }
        }

        public updateUser_args deepCopy() {
            return new updateUser_args(this);
        }

        @Override
        public void clear() {
            this.userName = null;
            this.pwd = null;
            this.buckets = null;
        }

        public String getUserName() {
            return this.userName;
        }

        public updateUser_args setUserName(String userName) {
            this.userName = userName;
            return this;
        }

        public void unsetUserName() {
            this.userName = null;
        }

        /**
         * Returns true if field userName is set (has been assigned a value) and false otherwise
         */
        public boolean isSetUserName() {
            return this.userName != null;
        }

        public void setUserNameIsSet(boolean value) {
            if (!value) {
                this.userName = null;
            }
        }

        public String getPwd() {
            return this.pwd;
        }

        public updateUser_args setPwd(String pwd) {
            this.pwd = pwd;
            return this;
        }

        public void unsetPwd() {
            this.pwd = null;
        }

        /**
         * Returns true if field pwd is set (has been assigned a value) and false otherwise
         */
        public boolean isSetPwd() {
            return this.pwd != null;
        }

        public void setPwdIsSet(boolean value) {
            if (!value) {
                this.pwd = null;
            }
        }

        public String getBuckets() {
            return this.buckets;
        }

        public updateUser_args setBuckets(String buckets) {
            this.buckets = buckets;
            return this;
        }

        public void unsetBuckets() {
            this.buckets = null;
        }

        /**
         * Returns true if field buckets is set (has been assigned a value) and false otherwise
         */
        public boolean isSetBuckets() {
            return this.buckets != null;
        }

        public void setBucketsIsSet(boolean value) {
            if (!value) {
                this.buckets = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case USER_NAME:
                    if (value == null) {
                        unsetUserName();
                    } else {
                        setUserName((String) value);
                    }
                    break;

                case PWD:
                    if (value == null) {
                        unsetPwd();
                    } else {
                        setPwd((String) value);
                    }
                    break;

                case BUCKETS:
                    if (value == null) {
                        unsetBuckets();
                    } else {
                        setBuckets((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_NAME:
                    return getUserName();

                case PWD:
                    return getPwd();

                case BUCKETS:
                    return getBuckets();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case USER_NAME:
                    return isSetUserName();
                case PWD:
                    return isSetPwd();
                case BUCKETS:
                    return isSetBuckets();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof updateUser_args)
                return this.equals((updateUser_args) that);
            return false;
        }

        public boolean equals(updateUser_args that) {
            if (that == null)
                return false;

            boolean this_present_userName = true && this.isSetUserName();
            boolean that_present_userName = true && that.isSetUserName();
            if (this_present_userName || that_present_userName) {
                if (!(this_present_userName && that_present_userName))
                    return false;
                if (!this.userName.equals(that.userName))
                    return false;
            }

            boolean this_present_pwd = true && this.isSetPwd();
            boolean that_present_pwd = true && that.isSetPwd();
            if (this_present_pwd || that_present_pwd) {
                if (!(this_present_pwd && that_present_pwd))
                    return false;
                if (!this.pwd.equals(that.pwd))
                    return false;
            }

            boolean this_present_buckets = true && this.isSetBuckets();
            boolean that_present_buckets = true && that.isSetBuckets();
            if (this_present_buckets || that_present_buckets) {
                if (!(this_present_buckets && that_present_buckets))
                    return false;
                if (!this.buckets.equals(that.buckets))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(updateUser_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPwd()).compareTo(other.isSetPwd());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPwd()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwd, other.pwd);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetBuckets()).compareTo(other.isSetBuckets());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBuckets()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buckets, other.buckets);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("updateUser_args(");
            boolean first = true;

            sb.append("userName:");
            if (this.userName == null) {
                sb.append("null");
            } else {
                sb.append(this.userName);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("pwd:");
            if (this.pwd == null) {
                sb.append("null");
            } else {
                sb.append(this.pwd);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("buckets:");
            if (this.buckets == null) {
                sb.append("null");
            } else {
                sb.append(this.buckets);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_NAME((short) 1, "userName"),
            PWD((short) 2, "pwd"),
            BUCKETS((short) 3, "buckets");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USER_NAME
                        return USER_NAME;
                    case 2: // PWD
                        return PWD;
                    case 3: // BUCKETS
                        return BUCKETS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class updateUser_argsStandardSchemeFactory implements SchemeFactory {
            public updateUser_argsStandardScheme getScheme() {
                return new updateUser_argsStandardScheme();
            }
        }

        private static class updateUser_argsStandardScheme extends StandardScheme<updateUser_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateUser_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.userName = iprot.readString();
                                struct.setUserNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PWD
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.pwd = iprot.readString();
                                struct.setPwdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // BUCKETS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.buckets = iprot.readString();
                                struct.setBucketsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateUser_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.userName != null) {
                    oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
                    oprot.writeString(struct.userName);
                    oprot.writeFieldEnd();
                }
                if (struct.pwd != null) {
                    oprot.writeFieldBegin(PWD_FIELD_DESC);
                    oprot.writeString(struct.pwd);
                    oprot.writeFieldEnd();
                }
                if (struct.buckets != null) {
                    oprot.writeFieldBegin(BUCKETS_FIELD_DESC);
                    oprot.writeString(struct.buckets);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateUser_argsTupleSchemeFactory implements SchemeFactory {
            public updateUser_argsTupleScheme getScheme() {
                return new updateUser_argsTupleScheme();
            }
        }

        private static class updateUser_argsTupleScheme extends TupleScheme<updateUser_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateUser_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUserName()) {
                    optionals.set(0);
                }
                if (struct.isSetPwd()) {
                    optionals.set(1);
                }
                if (struct.isSetBuckets()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetUserName()) {
                    oprot.writeString(struct.userName);
                }
                if (struct.isSetPwd()) {
                    oprot.writeString(struct.pwd);
                }
                if (struct.isSetBuckets()) {
                    oprot.writeString(struct.buckets);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateUser_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.userName = iprot.readString();
                    struct.setUserNameIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.pwd = iprot.readString();
                    struct.setPwdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.buckets = iprot.readString();
                    struct.setBucketsIsSet(true);
                }
            }
        }

    }

    public static class updateUser_result implements org.apache.thrift.TBase<updateUser_result, updateUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateUser_result> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUser_result.class, metaDataMap);
        }
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUser_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new updateUser_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new updateUser_resultTupleSchemeFactory());
        }
        public String success; // required

        public updateUser_result() {
        }

        public updateUser_result(
                String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateUser_result(updateUser_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public updateUser_result deepCopy() {
            return new updateUser_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public updateUser_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof updateUser_result)
                return this.equals((updateUser_result) that);
            return false;
        }

        public boolean equals(updateUser_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(updateUser_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("updateUser_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class updateUser_resultStandardSchemeFactory implements SchemeFactory {
            public updateUser_resultStandardScheme getScheme() {
                return new updateUser_resultStandardScheme();
            }
        }

        private static class updateUser_resultStandardScheme extends StandardScheme<updateUser_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateUser_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateUser_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateUser_resultTupleSchemeFactory implements SchemeFactory {
            public updateUser_resultTupleScheme getScheme() {
                return new updateUser_resultTupleScheme();
            }
        }

        private static class updateUser_resultTupleScheme extends TupleScheme<updateUser_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateUser_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateUser_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getUser_args implements org.apache.thrift.TBase<getUser_args, getUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUser_args> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUser_args.class, metaDataMap);
        }
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUser_args");
        private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new getUser_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getUser_argsTupleSchemeFactory());
        }
        public String userName; // required

        public getUser_args() {
        }

        public getUser_args(
                String userName) {
            this();
            this.userName = userName;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getUser_args(getUser_args other) {
            if (other.isSetUserName()) {
                this.userName = other.userName;
            }
        }

        public getUser_args deepCopy() {
            return new getUser_args(this);
        }

        @Override
        public void clear() {
            this.userName = null;
        }

        public String getUserName() {
            return this.userName;
        }

        public getUser_args setUserName(String userName) {
            this.userName = userName;
            return this;
        }

        public void unsetUserName() {
            this.userName = null;
        }

        /**
         * Returns true if field userName is set (has been assigned a value) and false otherwise
         */
        public boolean isSetUserName() {
            return this.userName != null;
        }

        public void setUserNameIsSet(boolean value) {
            if (!value) {
                this.userName = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case USER_NAME:
                    if (value == null) {
                        unsetUserName();
                    } else {
                        setUserName((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_NAME:
                    return getUserName();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case USER_NAME:
                    return isSetUserName();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getUser_args)
                return this.equals((getUser_args) that);
            return false;
        }

        public boolean equals(getUser_args that) {
            if (that == null)
                return false;

            boolean this_present_userName = true && this.isSetUserName();
            boolean that_present_userName = true && that.isSetUserName();
            if (this_present_userName || that_present_userName) {
                if (!(this_present_userName && that_present_userName))
                    return false;
                if (!this.userName.equals(that.userName))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(getUser_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getUser_args(");
            boolean first = true;

            sb.append("userName:");
            if (this.userName == null) {
                sb.append("null");
            } else {
                sb.append(this.userName);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_NAME((short) 1, "userName");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USER_NAME
                        return USER_NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class getUser_argsStandardSchemeFactory implements SchemeFactory {
            public getUser_argsStandardScheme getScheme() {
                return new getUser_argsStandardScheme();
            }
        }

        private static class getUser_argsStandardScheme extends StandardScheme<getUser_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getUser_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.userName = iprot.readString();
                                struct.setUserNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getUser_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.userName != null) {
                    oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
                    oprot.writeString(struct.userName);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getUser_argsTupleSchemeFactory implements SchemeFactory {
            public getUser_argsTupleScheme getScheme() {
                return new getUser_argsTupleScheme();
            }
        }

        private static class getUser_argsTupleScheme extends TupleScheme<getUser_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getUser_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUserName()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetUserName()) {
                    oprot.writeString(struct.userName);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getUser_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.userName = iprot.readString();
                    struct.setUserNameIsSet(true);
                }
            }
        }

    }

    public static class getUser_result implements org.apache.thrift.TBase<getUser_result, getUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUser_result> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUser_result.class, metaDataMap);
        }
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUser_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new getUser_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getUser_resultTupleSchemeFactory());
        }
        public String success; // required

        public getUser_result() {
        }

        public getUser_result(
                String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getUser_result(getUser_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public getUser_result deepCopy() {
            return new getUser_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public getUser_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getUser_result)
                return this.equals((getUser_result) that);
            return false;
        }

        public boolean equals(getUser_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(getUser_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getUser_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class getUser_resultStandardSchemeFactory implements SchemeFactory {
            public getUser_resultStandardScheme getScheme() {
                return new getUser_resultStandardScheme();
            }
        }

        private static class getUser_resultStandardScheme extends StandardScheme<getUser_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getUser_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getUser_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getUser_resultTupleSchemeFactory implements SchemeFactory {
            public getUser_resultTupleScheme getScheme() {
                return new getUser_resultTupleScheme();
            }
        }

        private static class getUser_resultTupleScheme extends TupleScheme<getUser_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getUser_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getUser_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class deleteUser_args implements org.apache.thrift.TBase<deleteUser_args, deleteUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteUser_args> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUser_args.class, metaDataMap);
        }
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUser_args");
        private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new deleteUser_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new deleteUser_argsTupleSchemeFactory());
        }
        public String userName; // required

        public deleteUser_args() {
        }

        public deleteUser_args(
                String userName) {
            this();
            this.userName = userName;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteUser_args(deleteUser_args other) {
            if (other.isSetUserName()) {
                this.userName = other.userName;
            }
        }

        public deleteUser_args deepCopy() {
            return new deleteUser_args(this);
        }

        @Override
        public void clear() {
            this.userName = null;
        }

        public String getUserName() {
            return this.userName;
        }

        public deleteUser_args setUserName(String userName) {
            this.userName = userName;
            return this;
        }

        public void unsetUserName() {
            this.userName = null;
        }

        /**
         * Returns true if field userName is set (has been assigned a value) and false otherwise
         */
        public boolean isSetUserName() {
            return this.userName != null;
        }

        public void setUserNameIsSet(boolean value) {
            if (!value) {
                this.userName = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case USER_NAME:
                    if (value == null) {
                        unsetUserName();
                    } else {
                        setUserName((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_NAME:
                    return getUserName();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case USER_NAME:
                    return isSetUserName();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteUser_args)
                return this.equals((deleteUser_args) that);
            return false;
        }

        public boolean equals(deleteUser_args that) {
            if (that == null)
                return false;

            boolean this_present_userName = true && this.isSetUserName();
            boolean that_present_userName = true && that.isSetUserName();
            if (this_present_userName || that_present_userName) {
                if (!(this_present_userName && that_present_userName))
                    return false;
                if (!this.userName.equals(that.userName))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(deleteUser_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("deleteUser_args(");
            boolean first = true;

            sb.append("userName:");
            if (this.userName == null) {
                sb.append("null");
            } else {
                sb.append(this.userName);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_NAME((short) 1, "userName");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USER_NAME
                        return USER_NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class deleteUser_argsStandardSchemeFactory implements SchemeFactory {
            public deleteUser_argsStandardScheme getScheme() {
                return new deleteUser_argsStandardScheme();
            }
        }

        private static class deleteUser_argsStandardScheme extends StandardScheme<deleteUser_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUser_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.userName = iprot.readString();
                                struct.setUserNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUser_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.userName != null) {
                    oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
                    oprot.writeString(struct.userName);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteUser_argsTupleSchemeFactory implements SchemeFactory {
            public deleteUser_argsTupleScheme getScheme() {
                return new deleteUser_argsTupleScheme();
            }
        }

        private static class deleteUser_argsTupleScheme extends TupleScheme<deleteUser_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteUser_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUserName()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetUserName()) {
                    oprot.writeString(struct.userName);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteUser_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.userName = iprot.readString();
                    struct.setUserNameIsSet(true);
                }
            }
        }

    }

    public static class deleteUser_result implements org.apache.thrift.TBase<deleteUser_result, deleteUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteUser_result> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUser_result.class, metaDataMap);
        }
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUser_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new deleteUser_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new deleteUser_resultTupleSchemeFactory());
        }
        public String success; // required

        public deleteUser_result() {
        }

        public deleteUser_result(
                String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteUser_result(deleteUser_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public deleteUser_result deepCopy() {
            return new deleteUser_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public deleteUser_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteUser_result)
                return this.equals((deleteUser_result) that);
            return false;
        }

        public boolean equals(deleteUser_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(deleteUser_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("deleteUser_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class deleteUser_resultStandardSchemeFactory implements SchemeFactory {
            public deleteUser_resultStandardScheme getScheme() {
                return new deleteUser_resultStandardScheme();
            }
        }

        private static class deleteUser_resultStandardScheme extends StandardScheme<deleteUser_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUser_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUser_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteUser_resultTupleSchemeFactory implements SchemeFactory {
            public deleteUser_resultTupleScheme getScheme() {
                return new deleteUser_resultTupleScheme();
            }
        }

        private static class deleteUser_resultTupleScheme extends TupleScheme<deleteUser_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteUser_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteUser_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

}
