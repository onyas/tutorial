<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        "> 

   	<!-- 
		配置bean
		class:bean的全类名，通过反射的方式在IOC容器中创建Bean，所以要求Bean中必须有无参的构造器
		id: 标识容器中的bean,是唯一的
	 -->
	<bean id="helloworld" class="com.tutorial.spring4.HelloWorld">
		<property name="name" value="Spring"></property>
	</bean>


	<!-- 
		有两种注入方式，前面用的是属性注入，这个例子用的是构造器注入
		并且通过index,和type属性来指定参数的顺序，并以此来区分重载的构造器
	 -->
	<bean id="car" class="com.tutorial.spring4.Car">
		<constructor-arg value="Audi" index="0"></constructor-arg>
		<!-- 
			如果字面值包含特殊字符可以用<![CDATA[]]>包装起来 
			属性值可以通过value元素进行配置		
		-->
		<constructor-arg index="1">
			<value><![CDATA[<ShangHai>]]></value>
		</constructor-arg>
		<constructor-arg value="400000.0" type="double"></constructor-arg>
	</bean>
	
	<bean id="car2" class="com.tutorial.spring4.Car">
		<constructor-arg value="BenChi" type="java.lang.String"></constructor-arg>
		<constructor-arg value="BeiJing" type="java.lang.String"></constructor-arg>
		<constructor-arg value="240" type="int"></constructor-arg>
	</bean>
	
	<bean id="person" class="com.tutorial.spring4.Person">
		<property name="name" value="Tom"></property>
		<property name="age" value="23"></property>
		<property name="car" ref="car"></property>
		<!-- 为级联属性赋值，注意，car需要先初始化后才可以为级联属性进行赋值，不然会有异常，和struts2不同 -->
		<property name="car.speed" value="260"></property>
	</bean>
	
	<bean id="carStore" class="com.tutorial.spring4.CarStore">
		<property name="name" value="BestCarStore"></property>
		<property name="cars">
			<!-- 使用list节点为List类型的属性赋值 ,数组也用list节点-->
			<!--
			<list>
				<ref bean="car"/>
				<ref bean="car2"/>
			</list>
			-->
			<!-- 引用util schema中定义的Bean -->
			<ref bean="cars"/>
		</property>
	</bean>
	
	<!-- 配置map属性值 -->
	<bean id="carStore2" class="com.tutorial.spring4.CarStore2">
		<property name="name" value="BestCarStore"></property>
		<property name="cars">
			<!-- 使用map节点，及entry来进行配置 -->
			<map>
				<entry key="Audi" value-ref="car"></entry>
				<entry key="BenChi" value-ref="car2"></entry>
			</map>
		</property>
	</bean>
	
	<!-- 配置Properties -->
	<bean id="dataSource" class="com.tutorial.spring4.DataSource">
		<property name="properties">
			<props>
				<prop key="username">root</prop>
				<prop key="password">1234</prop>
				<prop key="jdbcUrl">jdbc:mysql//localhost</prop>
				<prop key="driverClass">com.mysql.jdbc.Driver</prop>
			</props>
		</property>
	</bean>
	
	<!-- 
		使用util schema定义集合，这样，就可以在不同的Bean之间共享这个集合 
		在最上面导入util的命名空间
		xmlns:util="http://www.springframework.org/schema/util"
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
	-->
	<util:list id="cars">
		<ref bean="car"/>
		<ref bean="car2"/>
	</util:list>
	
	<!-- 
		使用P命名空间，引入P命名空间 xmlns:p="http://www.springframework.org/schema/p"
		进一步简化了基于xml的配置
	 -->
	 <bean id="cswithP" class="com.tutorial.spring4.CarStore" p:name="Better" p:cars-ref="cars">
	</bean>
	<!-- 
		Bean中有一个autowire属性，用来指定自动装配的方式
		byName 根据Bean的名字和当前bean的setter风格的属性名进行自动装配，若有匹配的，则进行装配，否则不装配
		byType 根据Bean的类型和当前Bean的属性的类型进行自动装配，若IOC容器中有1个以上的类型匹配，则抛异常
	 	也有缺点：
	 	1、不灵活，因为它会装配所有的属性，如果想要装配个别的属性时，就不适用
	 	2、autowrie要么根据类型匹配，要么根据名称匹配，不能两者混合使用
	 -->
	 <!-- 
	 	Bean与Bean之间的关系主要有继承(parent)和依赖(depends-on)
	 	继承(parent):可以继承父类Bean的属性，如果Bean的abstruct为true,那么不能被实例化
	 	依赖(depends-on)：表示当前Bean的初始化依赖另外的Bean，如果依赖多个Bean，可以用逗号或空格分开多个Bean
	  -->
	  
	  <!-- 
	  	使用Bean的scope属性来配置Bean的作用域
	  	singleton:默认值，容器初始化时创建bean实例，在整个容器的生命周期只创建这一个bean
	  	prototype:原型的，容器初始化时 不创建bean实例，而在每次请求时都创建一个新的Bean实例，并返回
	   -->
	   
	   <!-- 
	   	在配置文件中引入属性文件的方法
	   	1、首先在beans中添加context Schema定义
	   		 xmlns:context="http://www.springframework.org/schema/context"
	   		 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	   	2、在配置文件中加入如下配置:
	   		<context:property-placeholder location="classpath:db.properties">
	   	3、在需要的地方用${key}的方式引用属性文件中的定义
	    -->
	    <!-- 导入属性文件 -->
	    <context:property-placeholder location="classpath:db.properties"/>
	    <bean id="dataSource2" class="com.mchange.v2.c3p0.ComboPooledDataSource">
	    	<property name="user" value="${user}"></property>
	    	<property name="password" value="${password}"></property>
	    	<property name="driverClass" value="${driverclass}"></property>
	    	<property name="jdbcUrl" value="${jdbcurl}"></property>
	    </bean>
	    
	    
	    <!-- 
	    SpEL表达式
			1、使用SpEl表达式引用类的静态属性
			<property name="rais" value="#{T(java.lang.Math).PI * 80}" />
			2、SpEL表达式引用其他的bean
			<property name="car" value="#{car}" />
			3、SpEL表达式引用其他bean中的属性
			<property name="city" value="#{address.city}" />
			4、SpEL表达式中使用运算符
			<property name="info" value="#{car.price > 30000 ? '土豪':'吊丝'}" />
	     -->
	     
	     <!-- 
	     IOC容器中Bean的生命周期方法
	     	1、通过构造器或工厂方法创建Bean实例
	     	2、为Bean的属性设置值和对其他Bean的引用
	     	  	  将Bean实例传递给Bean后置处理器(BeforeInitial..)
	     	3、调用Bean的初始化方法(init-method属性)
	     		  将Bean实例传递给Bean后置处理器(AfterInitial..)
	     	4、Bean可以使用
	     	5、当容器关闭时，引用Bean的销毁方法(destory-method属性)
	      -->
	      <bean id="lifeCycle" class="com.tutorial.spring4.LifeCycle" init-method="init" destroy-method="destroy">
	      	<property name="name" value="JustATest"></property>
	      </bean>
	      <!-- 
	      	配置Bean的后置处理器，不需要配置id,IOC容器可以自动识别是一个BeanPostProcessor
	       -->
	      <bean class="com.tutorial.spring4.MyBeanPostProcessor"></bean>
</beans>