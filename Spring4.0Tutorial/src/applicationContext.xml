<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"> 

   	<!-- 
		配置bean
		class:bean的全类名，通过反射的方式在IOC容器中创建Bean，所以要求Bean中必须有无参的构造器
		id: 标识容器中的bean,是唯一的
	 -->
	<bean id="helloworld" class="com.tutorial.spring4.HelloWorld">
		<property name="name" value="Spring"></property>
	</bean>


	<!-- 
		有两种注入方式，前面用的是属性注入，这个例子用的是构造器注入
		并且通过index,和type属性来指定参数的顺序，并以此来区分重载的构造器
	 -->
	<bean id="car" class="com.tutorial.spring4.Car">
		<constructor-arg value="Audi" index="0"></constructor-arg>
		<!-- 
			如果字面值包含特殊字符可以用<![CDATA[]]>包装起来 
			属性值可以通过value元素进行配置		
		-->
		<constructor-arg index="1">
			<value><![CDATA[<ShangHai>]]></value>
		</constructor-arg>
		<constructor-arg value="400000.0" type="double"></constructor-arg>
	</bean>
	
	<bean id="car2" class="com.tutorial.spring4.Car">
		<constructor-arg value="BenChi" type="java.lang.String"></constructor-arg>
		<constructor-arg value="BeiJing" type="java.lang.String"></constructor-arg>
		<constructor-arg value="240" type="int"></constructor-arg>
	</bean>
	
	<bean id="person" class="com.tutorial.spring4.Person">
		<property name="name" value="Tom"></property>
		<property name="age" value="23"></property>
		<property name="car" ref="car"></property>
		<!-- 为级联属性赋值，注意，car需要先初始化后才可以为级联属性进行赋值，不然会有异常，和struts2不同 -->
		<property name="car.speed" value="260"></property>
	</bean>
	
	<bean id="carStore" class="com.tutorial.spring4.CarStore">
		<property name="name" value="BestCarStore"></property>
		<property name="cars">
			<!-- 使用list节点为List类型的属性赋值 ,数组也用list节点-->
			<!--
			<list>
				<ref bean="car"/>
				<ref bean="car2"/>
			</list>
			-->
			<!-- 引用util schema中定义的Bean -->
			<ref bean="cars"/>
		</property>
	</bean>
	
	<!-- 配置map属性值 -->
	<bean id="carStore2" class="com.tutorial.spring4.CarStore2">
		<property name="name" value="BestCarStore"></property>
		<property name="cars">
			<!-- 使用map节点，及entry来进行配置 -->
			<map>
				<entry key="Audi" value-ref="car"></entry>
				<entry key="BenChi" value-ref="car2"></entry>
			</map>
		</property>
	</bean>
	
	<!-- 配置Properties -->
	<bean id="dataSource" class="com.tutorial.spring4.DataSource">
		<property name="properties">
			<props>
				<prop key="username">root</prop>
				<prop key="password">1234</prop>
				<prop key="jdbcUrl">jdbc:mysql//localhost</prop>
				<prop key="driverClass">com.mysql.jdbc.Driver</prop>
			</props>
		</property>
	</bean>
	
	<!-- 
		使用util schema定义集合，这样，就可以在不同的Bean之间共享这个集合 
		在最上面导入util的命名空间
		xmlns:util="http://www.springframework.org/schema/util"
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
	-->
	<util:list id="cars">
		<ref bean="car"/>
		<ref bean="car2"/>
	</util:list>
	
	<!-- 
		使用P命名空间，引入P命名空间 xmlns:p="http://www.springframework.org/schema/p"
		进一步简化了基于xml的配置
	 -->
	 <bean id="cswithP" class="com.tutorial.spring4.CarStore" p:name="Better" p:cars-ref="cars">
	</bean>
</beans>